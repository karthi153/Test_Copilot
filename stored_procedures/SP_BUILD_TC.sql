create or replace PROCEDURE                                                        SP_BUILD_TC
   (P_TRADE_ID               TRADECOMM.TRADE_ID%TYPE
   ,P_REP_NUMBER      IN     TRADECOMM.REP_NUMBER_OF_RECORD%TYPE  -- BJR 8/13/08 #1854 (457) CHANGE P_REP_NUMBER TO ORPHAN_REP_NUMBER FOR REALLOCATION
   ,P_REP_NUMBER_OF_RECORD   TRADECOMM.REP_NUMBER_OF_RECORD%TYPE
   ,P_REP_SPLIT              TRADECOMM.REP_SPLIT_PCT%TYPE
   ,P_MP_IND                 VARCHAR2
   ,P_SOFT_ERROR      IN OUT VARCHAR2
   ,P_SOFT_ERROR_CODE  IN OUT VARCHAR2  -- TRADE SEARCH LATENCY ISSUE
   ,P_HARD_ERROR      IN OUT VARCHAR2
   ) IS
   L_JOINT_SPLIT             TRADECOMM.JOINT_SPLIT_PCT%TYPE;
   L_RDS_ID                  RDS.RDS_ID%TYPE;
   L_TC_ID                   TRADECOMM.TC_ID%TYPE;
   L_SAVE_SOFT_ERROR         VARCHAR2 (255);
   L_SOFT_ERROR              VARCHAR2 (255);
   L_HARD_ERROR              VARCHAR2 (255);
   L_FEE_FORMULA             BD.FEE_DEDUCTION_FORMULA%TYPE;
   L_TOTAL_COMM_PCT          DECIMAL (5, 2) := 0;
   L_TOTAL_CNT               DECIMAL (18,0) := 0;
   L_TOTAL_EXC_HOUSE_PCT     DECIMAL (5, 2) := 0;
   L_TOTAL_OSJ_PCT           DECIMAL (5, 2) := 0;
   L_COMM                    TRADECOMM.COMMISSION_AMT%TYPE;
   L_HOUSE_REP               RDS.REP_NUMBER%TYPE;
   -- L_QUAL_CODE               TRADECOMM.QUAL_CODE%TYPE;  -- BJR 8/13/08 #457 - BELONGS IN PROCEDURE INSERT_IT TO ENABLE ORACLE DEBUGGING
   L_TITLE_LIC_OVERRIDE      SYSTEM_CODES.SPECIAL_IND_10%TYPE;
   L_REP_STOP_DATE           REPS_NUMBERS.STOP_PAYMENT_DATE%TYPE;
   L_RDS_TYPE                RDS.RDS_TYPE%TYPE;
   L_MP_RESULTS              VARCHAR2 (2000);
   L_529_ERROR               TAPE_ERROR_LIST.CODE_SHORT_DESC%TYPE;
   L_HOLD_PAYMENT_IND        REPS_NUMBERS.HOLD_PAYMENT_IND%TYPE;
   L_SOFT_ERROR_CODE         VARCHAR2 (255);             -- TRADE SEARCH LATENCY ISSUE
   L_ERROR_CODE              TAPE_ERROR_LIST.CODE_ID%TYPE;   -- TRADE SEARCH LATENCY ISSUE
   L_SAVE_SOFT_ERROR_CODE    VARCHAR2 (255);     -- TRADE SEARCH LATENCY ISSUE
   L_VESTED_IND              REPS_STATUS.TERM_VESTED_IND%TYPE; -- VESTED REPS ISSUE 12-14-04 TL
   L_PAY_ORPHAN              INTEGER; -- 12/22/04 CG; ISSUE ORPHANED REPS
   L_IS_BP_REP               BOOLEAN := FALSE; -- 4/18/05 CG:  BREAKPOINT REPS
   L_IS_BP_REP_FLAG          BOOLEAN := FALSE; -- 4/18/05 CG:  BREAKPOINT REPS
   L_ORPHAN_REP_PERIOD       BD.ORPHAN_REP_PERIOD%TYPE;  -- CG; 12/13/05: ISSUE 392
   --L_IGNORE_529            BD.IGNORE_529_HOLDS%TYPE;  -- CG: ISSUE 431
   L_IS_TERMED_REP__ON_RDS   BOOLEAN; --KS 07/11/2006 TO HOLD TRADE WITH TERMED REP ON RDS
   L_TERMED_REPS_ON_RDS      VARCHAR2 (255);  --KS 07/11/2006 TO HOLD TRADE WITH TERMED REP ON RDS
   L_PARTICIPANT_ACTIVE_IND   VARCHAR2 (1);    -- BJR 11/08/2007 #813 RDS PARTICIPANT ACTIVE?
   L_REP_OF_RECORD_VESTED_IND VARCHAR2(1);     -- BJR 11/08/2007 #813 TRADE REP OF RECORD VESTED
   L_PARTICIPANT_VESTED_IND  VARCHAR2(1);     -- BJR 11/08/2007 #813 RDS PARTICIPANT REP VESTED
   L_EXCEPTION_COUNT         NUMBER;           --ADDED BY NIIT ON 05-DEC-3007 AGAINST ISSUE NO. 1391
   L_TICKET_CHARGE_AMT       TRADECOMM.TICKET_CHARGE_AMT%TYPE;   --ADDED BY NIIT ON 05-DEC-3007 AGAINST ISSUE NO. 1391
   L_REP_NUMBER_TYPE         VARCHAR2(1);       -- BJR 07/01/08 #457: DETERMINE IF RNR IS INDIVIDUAL, JOINT OR SPLIT
   L_APPROVED_PENDING_PRINTS_IND VARCHAR2(1);       -- BJR 07/01/08 #457: ARE ANY SSN'S CONNECTED TO RNR APPROVED PENDING PRINTS?
   L_NOTES                   TRADES.NOTES%TYPE;--@SASI 08/30/2016 BIZREQ-262,BON-292
   L_FEE_AMT                   TRADES.FEE_AMT%TYPE;--@SASI 08/30/2016 BIZREQ-262,BON-292
   L_COMM_ICC                TRADECOMM.COMMISSION_AMT%TYPE;
   L_TICKET_CHARGE_AMT_ICC   TRADECOMM.TICKET_CHARGE_AMT%TYPE;

   --Pay Termed Rep till Stop Payment Dt for Configured Spon Code / Group Code -- CIO-825  Bala 8/5/24
   L_REP_TERM_EXCEPTION_TRADE   BOOLEAN := FALSE;

   TYPE REC_INSERT_IT_INFO  IS RECORD -- CG: DEBUGGING VARIABLE
     (RDS_REP_NUMBER         RDS_DETAILS.REP_NUMBER%TYPE
      ,RDS_PCT               RDS_DETAILS.PAYOUT_PERCENTAGE%TYPE
      ,RDS_PAYOUT_TYPE       RDS_DETAILS.PAYOUT_TYPE%TYPE
      ,TICKET_CHARGE     RDS_DETAILS.TICKET_CHARGE_PCT%TYPE --SW 01/30/2012 BNS-33079
     );
   INSERT_IT_INFO        REC_INSERT_IT_INFO;  -- CG: DEBUGGING VARIABLE
   --CHAGED NIIT ORACLE 10G MIGRATION TO PRIORITIZE REP WITH PRIMARY_SSN OVER OTHER.
   CURSOR RS_TRADE IS
      SELECT T.BD
            ,T.SPONSOR_ACCT_NUMBER
            ,T.PROD_SPON_CODE
            ,T.SPON_CODE
            ,T.PRODUCT_NUMBER
            ,P.GROUP_CODE
            ,P.SUB_GROUP_CODE
            ,T.A12B1_IND
            ,T.CREATE_DATE
            ,T.GDC_AMT
            ,T.FEE_AMT
            ,T.STATE_CODE
            ,T.TRADE_DATE
            ,T.GDC_CREDIT_ONLY_IND
            ,T.FEE_CODE
            ,T.HELD_IND
            ,T.MANUAL_HELD_IND
            ,T.NOTES
            ,T.CLIENT_ID  -- Code added for CIA-1447
        FROM TRADES   T
            ,PRODUCTS P
       WHERE T.PROD_SPON_CODE = P.SPON_CODE
         AND T.PRODUCT_NUMBER = P.PRODUCT_NUMBER
         AND T.TRADE_ID = P_TRADE_ID;
   REC_TRD                   RS_TRADE%ROWTYPE;
   CURSOR RS_REP   (P_REP_NUMBER REPS_NUMBERS.REP_NUMBER%TYPE) IS
      SELECT RN.OFFICE_CODE
            ,R.SSN
            ,R.TITLE
            ,RN.SPLIT_IND
            ,RN.LICENSE_OVERRIDE_IND
            ,SP_GET_OFFICE_OSJ (REC_TRD.BD, RN.OFFICE_CODE) OSJ_CODE
            ,RN.BD
        FROM REPS_NUMBERS RN
            ,REPS         R
       WHERE RN.BD         = R.BD
         AND RN.SSN        = R.SSN
         AND RN.BD         = REC_TRD.BD
         AND RN.REP_NUMBER = P_REP_NUMBER
       ORDER BY RN.STATUS_IND ASC
               ,RN.TERM_DATE  DESC
               ,RN.PRIMARY_SSN_IND DESC;
   REC_RR          RS_REP%ROWTYPE;
   REC_PAYEE       RS_REP%ROWTYPE;
   REC_PARTICIPANT RS_REP%ROWTYPE;

   CURSOR RS_REP_STATUS(P_REP_NUMBER REPS_NUMBERS.REP_NUMBER%TYPE) IS
       SELECT STATUS_IND
             ,TERM_DATE  -- CG; 12/13/05: ISSUE 392
             ,STOP_PAYMENT_DATE
             ,TERM_ORPHAN_REP_NUMBER -- 12/22/04 CG; ISSUE ORPHANED REPS
             ,TERM_ORPHAN_REP_DATE -- 12/22/04 CG; ISSUE ORPHANED REPS
             ,SPLIT_IND -- 12/22/04 CG; ISSUE ORPHANED REPS
       FROM REPS_NUMBERS
       WHERE BD = REC_TRD.BD
           AND REP_NUMBER = P_REP_NUMBER
       ORDER BY
           STATUS_IND ASC,
           STOP_PAYMENT_DATE DESC,
           DECODE(NVL(TERM_ORPHAN_REP_NUMBER,'||'),'||',2,1) ASC,-- ADDED NIIT ORACLE 10G MIGRATION TO PRIORITIZE REPS WITH ORPHANED OVER OTHERS
           PRIMARY_SSN_IND DESC;--ADDED NIIT ORACLE 10G MIGRATION TO PRIORITIZE REP WITH PRIMARY_SSN OVER OTHER.
       --  ORDER BY STATUS_IND ASC, STOP_PAYMENT_DATE DESC;
   V_STATUS   RS_REP_STATUS%ROWTYPE;
   V_PARTICIPANT_STATUS  RS_REP_STATUS%ROWTYPE;  -- BJR 11/08/07: #813 RDS PARTICIPANT STATUS
   V_RNR_STATUS RS_REP_STATUS%ROWTYPE; --@Sasi :BNS-147:06/02/2016
   V_RNR_SUSPENDED_STATUS_IND  REPS.STATUS_IND%TYPE;  --@Sasi :BIZREQ-3074 05/17/2018
   V_RNR_SUSPENDED_SPLIT_IND  REPS_NUMBERS.SPLIT_IND%TYPE;  --@Sasi :BIZREQ-8805 08/17/2018

   V_REP_EXCEPTION_STATUS RS_REP_STATUS%ROWTYPE; -- CIO-825 Bala 8/7/24

   CURSOR RS_REP_SUSPENDED (P_REP_NUMBER REPS_NUMBERS.REP_NUMBER%TYPE) IS --@Sasi : BIZREQ-3074 06/07/2018 -- Added Prameter P_REP_NUMBER for BIZREQ-8805
      SELECT R.STATUS_IND,RN.SPLIT_IND
        FROM REPS R
        INNER JOIN REPS_NUMBERS RN
        ON R.SSN = RN.SSN AND R.BD=RN.BD
        WHERE RN.REP_NUMBER = P_REP_NUMBER AND RN.BD = REC_TRD.BD
        ORDER BY R.STATUS_IND DESC;

   V_RN_SUSPENDED_STATUS RS_REP_SUSPENDED%ROWTYPE; --@Sasi :BNS-147:06/02/2016

   CURSOR RS_REP_HOLD_IND(P_REP_NUMBER REPS_NUMBERS.REP_NUMBER%TYPE) IS
       SELECT HOLD_PAYMENT_IND
       FROM REPS_NUMBERS
       WHERE BD = REC_TRD.BD
           AND REP_NUMBER = P_REP_NUMBER
           ORDER BY STATUS_IND ASC, STOP_PAYMENT_DATE DESC, PRIMARY_SSN_IND DESC;
       --ORDER BY STATUS_IND ASC, STOP_PAYMENT_DATE DESC;
       --CHAGED NIIT ORACLE 10G MIGRATION TO PRIORITIZE REP WITH PRIMARY_SSN OVER OTHER.
--ADDED NIIT 11/05/07 ISSUE # 813 TO CHECK TERMED VESTED REPS ON RDS.
   CURSOR RS_VESTED_RDS(P_REP_NUMBER REPS_NUMBERS.REP_NUMBER%TYPE) IS
      SELECT NVL(S.TERM_VESTED_IND,'N') FROM REPS_STATUS S, REPS_NUMBERS N
      WHERE N.BD = S.BD
         AND N.SSN = S.SSN
         AND REP_NUMBER = P_REP_NUMBER
      ORDER BY S.TERM_VESTED_IND DESC ; --END 12-14-04
   -- BJR 11/8/2007: #813 - CHECK IF REP_NUMBER IS VESTED
   CURSOR RS_REP_VESTED(P_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE) IS
      SELECT NVL(S.TERM_VESTED_IND,'N') FROM REPS_STATUS S, REPS_NUMBERS N
      WHERE N.BD = S.BD
         AND N.SSN = S.SSN
         AND REP_NUMBER = P_REP_NUM
         AND N.BD = REC_TRD.BD
      ORDER BY S.TERM_VESTED_IND DESC ; --END 12-14-04
   -- VESTED REPS ISSUE 12-14-04 TL
   CURSOR RS_VESTED IS
      SELECT S.TERM_VESTED_IND FROM REPS_STATUS S, REPS_NUMBERS N
      WHERE  N.BD = S.BD
         AND N.SSN = S.SSN
         AND REP_NUMBER = P_REP_NUMBER
         AND N.BD = REC_TRD.BD                -- BJR 11/08/07: ISSUE 813  REP NUMBER TABLE ACCESS NEEDS BD FOR UNIQUENESS
      ORDER BY S.TERM_VESTED_IND DESC ;--CHANGED NIIT 11/05/07 ISSUE # 813 TO PRIORITIZE VESTED REP OVER OTHER  --END 12-14-04
   -- 11/08/07 ISSUE #813 RETRIEVE STOP_PAYMENT_DATE
   CURSOR RS_STOP_PAYMENT(P_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE) IS
      SELECT STOP_PAYMENT_DATE FROM REPS_NUMBERS N
      WHERE N.BD = REC_TRD.BD
         AND N.REP_NUMBER = P_REP_NUM;
   -- 11/08/07 ISSUE # 813 CHECK IF A REP_NUMBER IS ACTIVE
   CURSOR RS_REP_ACTIVE(P_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE) IS
      SELECT N.STATUS_IND
      FROM REPS_NUMBERS N
      WHERE N.BD = REC_TRD.BD
         AND N.REP_NUMBER = P_REP_NUM
      ORDER BY N.START_DATE DESC;
-- KS 04/15/2008 ISSUE # 1663.
   CURSOR RS_OVERRIDE_REPS(P_RDS_ID RDS_DETAILS.RDS_ID%TYPE,P_HOUSE_REP REPS_NUMBERS.REP_NUMBER%TYPE) IS
      SELECT RD.REP_NUMBER
      FROM RDS_DETAILS RD
      WHERE RD.RDS_ID = P_RDS_ID
            AND RD.PAYOUT_TYPE = 'O'
            AND RD.REP_NUMBER <> NVL(P_HOUSE_REP,' ')
      ORDER BY RD.PAYOUT_PERCENTAGE DESC;
   -- 11/08/2007 ISSUE #813 PRETTIFY CODE - CHECK IF REP NUMBER IS ACTIVE
   FUNCTION SP_REP_ACTIVE(P_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE) RETURN VARCHAR2 IS
   L_ACTIVE_IND      REPS_NUMBERS.STATUS_IND%TYPE;
   BEGIN
      OPEN RS_REP_ACTIVE(P_REP_NUM);
      FETCH RS_REP_ACTIVE INTO L_ACTIVE_IND;
      IF RS_REP_ACTIVE%NOTFOUND THEN
          L_ACTIVE_IND := 60;
      END IF;
      CLOSE RS_REP_ACTIVE;
      IF L_ACTIVE_IND = 10 THEN
          RETURN 'Y';
      ELSE
          RETURN 'N';
      END IF;
   END;
   -- 11/08/2007 ISSUE #813 PRETTIFY CODE - CHECK IF REP IS VESTED
   FUNCTION SP_REP_VESTED(P_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE) RETURN VARCHAR2 IS
   L_IS_VESTED_IND   VARCHAR2(1);
   BEGIN
      OPEN RS_REP_VESTED(P_REP_NUM);
      FETCH RS_REP_VESTED INTO L_IS_VESTED_IND;
      IF RS_REP_VESTED%NOTFOUND THEN
          L_IS_VESTED_IND := 'N';
      END IF;
      CLOSE RS_REP_VESTED;
      RETURN L_IS_VESTED_IND;
   END;
   -- 11/08/2007 ISSUE #813 PRETTIFY CODE - CHECK IF STOP_PAYMENT_DATE IS REACHED
   FUNCTION SP_STOP_PAYMENT_DATE_REACHED(P_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE) RETURN BOOLEAN IS
   L_STOP_DATE   DATE;
   BEGIN
       OPEN RS_STOP_PAYMENT(P_REP_NUM);
       FETCH RS_STOP_PAYMENT INTO L_STOP_DATE;
       CLOSE RS_STOP_PAYMENT;
       IF L_STOP_DATE IS NULL THEN
          RETURN FALSE;
       ELSIF REC_TRD.CREATE_DATE < L_STOP_DATE THEN
          RETURN FALSE;
       ELSE
          RETURN TRUE;
       END IF;
   END;
   --KS ISSUE # 1081 TO HOLD TRADES FOR PENDING REPS
   FUNCTION IS_ANY_REP_NUM_INACTIVE(P_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE,P_RDS_ID RDS.RDS_ID%TYPE) RETURN BOOLEAN IS
   L_INACTIVE_COUNT NUMBER;
   BEGIN
       SELECT
                              COUNT(*)
                          INTO L_INACTIVE_COUNT
                    FROM
                        REPS_NUMBERS RN
                    WHERE
                         RN.BD = REC_TRD.BD
                         AND RN.STATUS_IND NOT IN(10,60)
                         AND (RN.REP_NUMBER = P_REP_NUMBER
                             OR RN.REP_NUMBER IN(SELECT RD.REP_NUMBER
                                                 FROM RDS_DETAILS RD
                                                 WHERE RD.RDS_ID = P_RDS_ID));
                      IF NVL(L_INACTIVE_COUNT,0) = 0 THEN
          RETURN FALSE;
       ELSE
          RETURN TRUE;
       END IF;
   END;
   -- 12/22/04 CG; ISSUE ORPHANED REPS
   FUNCTION PAY_ORPHAN (P_REP_NUMBER REPS_NUMBERS.REP_NUMBER%TYPE,
                        P_TRADE_CREATE_DATE TRADES.CREATE_DATE%TYPE,
                        P_GROUP_CODE PRODUCTS.GROUP_CODE%TYPE,
                        P_TERM_ORPHAN_REP_NUMBER IN OUT REPS_NUMBERS.TERM_ORPHAN_REP_NUMBER%TYPE,
                        P_TERM_ORPHAN_REP_DATE IN OUT REPS_NUMBERS.TERM_ORPHAN_REP_DATE%TYPE)
            RETURN INTEGER IS
       L_REC_STATUS      RS_REP_STATUS%ROWTYPE;
       L_VESTED_IND      RS_VESTED%ROWTYPE;
       L_CNT             INTEGER;
       L_IS_TERMED       BOOLEAN;
       L_IS_PAST_STOP_DATE       BOOLEAN;
       L_IS_PAST_TERM_DATE       BOOLEAN;  -- CG; 12/13/05: ISSUE 392
       L_IS_NOT_VESTED           BOOLEAN;
       L_PAY_ORPHAN_DATE_OK      BOOLEAN;
       L_TRADES_ORPHAN_DATE      DATE;
       L_REC_ORPHAN_REP_STATUS    RS_REP_STATUS%ROWTYPE;  -- BJR 12/04/2007: ISSUE 813 - SCENARIO 9 - FIXED INSURANCE ORPHANING
       L_ORPHAN_IS_TERMED         BOOLEAN;  -- BJR 12/04/2007  ISSUE 813  SCENARIO 9
       L_ORPHAN_IS_PAST_STOP_DATE BOOLEAN;  -- BJR 12/04/2007  ISSUE 813  SCENARIO 9
   BEGIN
       L_CNT :=0;
       L_REC_STATUS := NULL;
       -- LOAD REP STATUS INFO
       OPEN RS_REP_STATUS (P_REP_NUMBER);
       FETCH RS_REP_STATUS INTO L_REC_STATUS;
       CLOSE RS_REP_STATUS;
       L_VESTED_IND := NULL;
       -- LOAD REP VESTED INFO
       OPEN RS_VESTED;
       FETCH RS_VESTED INTO L_VESTED_IND;
       CLOSE RS_VESTED;
       -- IF FOLLOWING CONDITIONS OCCUR, PAY A ORPHAN REP
       --    A) ORIGINAL REP TERMED
       --    B) TRADE DATE PAST GRACE PERIOD
       --    C) REP NOT VESTED
       --    D) VALID ORPHAN REP AND DATES
       --    E) TRADE DATE ON OR BEFORE ORPHAN REP DATE
       L_IS_TERMED := (L_REC_STATUS.STATUS_IND = 60);
       L_IS_PAST_STOP_DATE := (TRUNC(P_TRADE_CREATE_DATE) > TRUNC(L_REC_STATUS.STOP_PAYMENT_DATE));
       L_IS_PAST_TERM_DATE := (TRUNC(NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE)) > TRUNC(L_REC_STATUS.TERM_DATE));  -- CG; 12/13/05: ISSUE 392
       L_IS_NOT_VESTED := NOT (P_GROUP_CODE = 'F' AND NVL(L_VESTED_IND.TERM_VESTED_IND, 'N') = 'Y');
       -- CG; 12/13/05: ISSUE 392
       L_TRADES_ORPHAN_DATE := TRUNC(L_REC_STATUS.TERM_DATE + NVL(L_ORPHAN_REP_PERIOD,0));
       IF REC_TRD.A12B1_IND = 'Y' THEN
           L_PAY_ORPHAN_DATE_OK := (TRUNC(P_TRADE_CREATE_DATE) <= TRUNC(L_REC_STATUS.TERM_ORPHAN_REP_DATE));
       ELSE
           L_PAY_ORPHAN_DATE_OK := (TRUNC(P_TRADE_CREATE_DATE) <= TRUNC(L_REC_STATUS.TERM_ORPHAN_REP_DATE));
       END IF;
       -- BJR 12/04/2007: ISSUE 813, FIXED INSURANCE SCENARIO 9, RETURN ORPHAN REP FOR  THE FOLLOWING
       --     L_IS_PAST_STOP_DATE = TRUE  (REP IS PAST STOP PAYMENT DATE)
       --     P_GROUP_CODE = 'F'          (PRODUCT GROUP CODE IS FIXED)
       --     L_IS_NOT_VESTED = TRUE      (REP IS NOT VESTED)
       --     L_REC_STATUS.TERM_ORPHAN_REP_NUMBER IS NOT NULL  (ORPHAN REP IS ASSIGNED)
       --
       --     FIXED INSURANCE IS DIFFERENT IN THAT THERE IS NO STOP DATE FOR PAYING OUT FIXED INSURANCE.
       --     ONLY IF THE ORPHAN REP HAS TERMINATED DOES THE COMMISSION GET PAID TO THE HOUSE.
       OPEN RS_REP_STATUS(L_REC_STATUS.TERM_ORPHAN_REP_NUMBER);
       FETCH RS_REP_STATUS INTO L_REC_ORPHAN_REP_STATUS;
       CLOSE RS_REP_STATUS;
       IF (UPPER(P_GROUP_CODE) = 'F' AND L_IS_PAST_STOP_DATE AND L_IS_NOT_VESTED AND L_REC_STATUS.TERM_ORPHAN_REP_NUMBER IS NOT NULL) THEN
           -- DETERMINE IF TERM_ORPHAN_REP_NUMBER IS ACTIVE
           L_ORPHAN_IS_TERMED := (L_REC_ORPHAN_REP_STATUS.STATUS_IND = 60);
           L_ORPHAN_IS_PAST_STOP_DATE := (TRUNC(P_TRADE_CREATE_DATE) > TRUNC(L_REC_ORPHAN_REP_STATUS.STOP_PAYMENT_DATE));
           IF (L_ORPHAN_IS_TERMED AND L_ORPHAN_IS_PAST_STOP_DATE) THEN
              -- ORPHAN IS TERMINATED, CANNOT BE PAID
              P_TERM_ORPHAN_REP_NUMBER := NULL;
              L_CNT := -1; -- THIS RETURN VALUE WILL RESULT IN AN RDS_ID OF NULL THAT WILL PAY TO THE HOUSE.
           ELSE
              P_TERM_ORPHAN_REP_NUMBER := L_REC_STATUS.TERM_ORPHAN_REP_NUMBER;
              P_TERM_ORPHAN_REP_DATE   := NULL;
              L_CNT := 2;  -- THIS WILL BE RETURN VALUE
           END IF;
       ELSIF (L_IS_TERMED AND
             (
                (L_IS_PAST_STOP_DATE AND REC_TRD.A12B1_IND = 'Y') OR
                 -- CIO-825 Pay Termed Rep till stop payment date for configured Spon Code / Group Code - Bala 8/5/24  Begin
                   --((L_IS_PAST_TERM_DATE OR L_IS_PAST_STOP_DATE) AND REC_TRD.A12B1_IND = 'N' ) -- CG; 12/13/05: ISSUE 392
                (REC_TRD.A12B1_IND = 'N' AND L_REP_TERM_EXCEPTION_TRADE=TRUE AND L_IS_PAST_STOP_DATE ) OR
                ((L_IS_PAST_TERM_DATE OR L_IS_PAST_STOP_DATE) AND REC_TRD.A12B1_IND = 'N' AND L_REP_TERM_EXCEPTION_TRADE=FALSE ) -- CIO-825; CG; 12/13/05: ISSUE 392
                -- CIO-825 Bala 8/5/24 End
                ) AND
                   L_IS_NOT_VESTED AND
                     (L_REC_STATUS.TERM_ORPHAN_REP_NUMBER IS NOT NULL) AND
                     (L_REC_STATUS.TERM_ORPHAN_REP_DATE IS NOT NULL) AND
                      L_PAY_ORPHAN_DATE_OK) THEN
           P_TERM_ORPHAN_REP_NUMBER := L_REC_STATUS.TERM_ORPHAN_REP_NUMBER;
           -- CG; 12/13/05: ISSUE 392
           IF REC_TRD.A12B1_IND = 'Y' THEN
               P_TERM_ORPHAN_REP_DATE := L_REC_STATUS.TERM_ORPHAN_REP_DATE;
           ELSE
               P_TERM_ORPHAN_REP_DATE := L_TRADES_ORPHAN_DATE;
           END IF;
--         DG 08/27/08 ISSUE #1854: COMMENTED AS IT IS NOT USED
--           IF L_REC_STATUS.SPLIT_IND = 'Y' THEN
--               L_CNT :=1;
--           ELSE
--               L_CNT :=2;
--           END IF;
            L_CNT := 2;
       ELSE
           ---KS 06/29/2005 ISSUE #662 ADDED TO HANDLE RDS AS PER PAYMENT MODEL
           IF (L_IS_TERMED AND
              (
                 (L_IS_PAST_STOP_DATE AND REC_TRD.A12B1_IND = 'Y') OR
                 --CIO-825 Pay Termed Rep till stop payment date for configured Spon Code / Group Code - Bala 8/5/24  Begin
                    --((L_IS_PAST_TERM_DATE OR L_IS_PAST_STOP_DATE) AND REC_TRD.A12B1_IND = 'N' ) -- CG; 12/13/05: ISSUE 392
                 (REC_TRD.A12B1_IND = 'N' AND L_REP_TERM_EXCEPTION_TRADE=TRUE AND L_IS_PAST_STOP_DATE ) OR
                 ((L_IS_PAST_TERM_DATE OR L_IS_PAST_STOP_DATE) AND REC_TRD.A12B1_IND = 'N' AND L_REP_TERM_EXCEPTION_TRADE=FALSE ) --CIO-825; CG; 12/13/05: ISSUE 392
             ) AND
                   L_IS_NOT_VESTED) THEN
               L_CNT :=-1;
           END IF;
       END IF;
       RETURN L_CNT;
   END; -- END ORPHAN REPS
   FUNCTION QUAL_CODE_ERR (P_QUAL_CODE TRADECOMM.QUAL_CODE%TYPE
                          ,P_ERROR     DECIMAL
                          ) RETURN BOOLEAN IS
       L_WORK_QUAL_CODE       TRADECOMM.QUAL_CODE%TYPE;
       L_CNT                  INTEGER;
   BEGIN
       L_CNT := 0;
       IF P_ERROR > P_QUAL_CODE THEN
           RETURN FALSE;
       END IF;
       L_WORK_QUAL_CODE := P_QUAL_CODE;
       L_CNT := 16;
       LOOP
           IF L_WORK_QUAL_CODE >= L_CNT THEN
               L_WORK_QUAL_CODE := L_WORK_QUAL_CODE - L_CNT;
               IF P_ERROR = L_CNT THEN
                   RETURN TRUE;
               END IF;
           END IF;
           L_CNT := L_CNT / 2;
           IF L_CNT <= 1 THEN
               RETURN FALSE;
           END IF;
       END LOOP;
       RETURN FALSE;
   END;
   FUNCTION IS_THIS_ERROR_ADDED
            RETURN BOOLEAN IS
   L_HELD_REASON    TRADES.HELD_REASON%TYPE;
   BEGIN
       SELECT HELD_REASON INTO L_HELD_REASON
       FROM TRADES
       WHERE TRADE_ID=P_TRADE_ID;
       RETURN INSTR(L_HELD_REASON || ' ','REP NUMBER ' || P_REP_NUMBER  || ' ' || 'IS ON HOLD. ' || CHR (13) || CHR (10))<>0;
   END;
   --SW 01/30/2011 BNS-33079 ADDED TO CHECK IF THE TICKET CHARGES ARE CONFIGURABLE ON RDS
   FUNCTION IS_TICKET_CHARGE_ON_RDS RETURN BOOLEAN IS
   L_CONFIGURE_TIC_CHARGE RDS.CONFIG_FEE_DISTRIBUTION%TYPE;
   BEGIN
      SELECT NVL(MAX(CONFIG_FEE_DISTRIBUTION),'N') INTO L_CONFIGURE_TIC_CHARGE
        FROM RDS
       WHERE RDS_ID=L_RDS_ID;
      IF L_CONFIGURE_TIC_CHARGE='Y' THEN
        RETURN TRUE;
      ELSE
        RETURN FALSE;
      END IF;
   END;

   PROCEDURE ADD_SOFT_ERROR(P_MSG  VARCHAR2) IS
   SOFT_LENGTH  NUMERIC :=0;
   BEGIN
       IF P_SOFT_ERROR IS NOT NULL THEN
          SOFT_LENGTH := LENGTH(P_SOFT_ERROR);
       ELSE
          P_SOFT_ERROR := ' ';
       END IF;
       IF INSTR (P_SOFT_ERROR, P_MSG)=0 THEN -- THE MSG IS NOT ALREADY ADDED
          IF (SOFT_LENGTH + LENGTH(P_MSG)) <= 252 THEN
              IF SUBSTR(P_SOFT_ERROR,-3,3) = '...' THEN
                 P_SOFT_ERROR := SUBSTR(P_SOFT_ERROR,1,LENGTH(P_SOFT_ERROR)-3) || P_MSG;
              ELSE
                 P_SOFT_ERROR := TRIM(P_SOFT_ERROR || P_MSG);
              END IF;
          ELSE
              IF SUBSTR(P_SOFT_ERROR,-3,3) <> '...' THEN
                 P_SOFT_ERROR := TRIM(P_SOFT_ERROR || '...');
              END IF;
          END IF;
       END IF;
   END;
   --ADDED THIS PROCEDURE FOR THE TRADE SEARCH - LATENCY ISSUE
   PROCEDURE ADD_SOFT_ERROR_CODE(P_MSG_CODE  VARCHAR2) IS
   SOFT_LENGTH  NUMERIC :=0;
   BEGIN
      IF P_SOFT_ERROR_CODE IS NOT NULL THEN
         SOFT_LENGTH := LENGTH(P_SOFT_ERROR_CODE);
      ELSE
         P_SOFT_ERROR_CODE := ' ';
      END IF;
      IF INSTR (P_SOFT_ERROR_CODE, P_MSG_CODE)=0 THEN -- THE MSG CODE IS NOT ALREADY ADDED
          IF (SOFT_LENGTH + LENGTH(P_MSG_CODE)) <= 252 THEN
             IF SUBSTR(P_SOFT_ERROR_CODE,-3,3) = '...' THEN
                P_SOFT_ERROR_CODE := SUBSTR(P_SOFT_ERROR_CODE,1,LENGTH(P_SOFT_ERROR_CODE)-3) || P_MSG_CODE;
             ELSE
                P_SOFT_ERROR_CODE := TRIM(P_SOFT_ERROR_CODE || P_MSG_CODE);
             END IF;
          ELSE
             IF SUBSTR(P_SOFT_ERROR_CODE,-3,3) <> '...' THEN
                P_SOFT_ERROR_CODE := TRIM(P_SOFT_ERROR_CODE || '...');
             END IF;
          END IF;
      END IF;
   END;
   PROCEDURE INSERT_IT
      (P_RDS_REP_NUMBER      RDS_DETAILS.REP_NUMBER%TYPE
      ,P_RDS_PCT             RDS_DETAILS.PAYOUT_PERCENTAGE%TYPE
      ,P_RDS_PAYOUT_TYPE     RDS_DETAILS.PAYOUT_TYPE%TYPE
      ,P_TICKET_CHARGE       RDS_DETAILS.TICKET_CHARGE_PCT%TYPE DEFAULT NULL --SW 01/30/2011 BNS-33079
      ) IS
        LP_GDC_AMT          YTD_PROD.PTD%TYPE:= NULL;
        LP_OVERRIDE_REP     RDS_DETAILS.REP_NUMBER%TYPE;--KS 04/15/08 ISSUE # 1663
        L_QUAL_CODE         TRADECOMM.QUAL_CODE%TYPE;     -- BJR 8/13/08 #457 LOCAL SCOPE ENABLES DEBUGGING (VARIABLE ONLY USED IN THIS PROCEDURE)
        L_QUAL_CODE_RESTRICTED         TRADECOMM.QUAL_CODE%TYPE;  -- SATHIYA 05/31/2017 BIZREQ2504 AND BIZREQ5089
        L_QUAL_CODE_APPRPENDRES        TRADECOMM.QUAL_CODE%TYPE;  -- SATHIYA 05/31/2017 BIZREQ2504 AND BIZREQ5089
        L_IS_CONFIG_TICHARG_FLAG    BOOLEAN := FALSE; --SW 02/03/2012 BNS-33079 ADDED TO FLAG IF THE TICKET CHARGES DEDUCTION IS AS PER THE RDS
        V_REP_TERMED_EXCEPTION_STATUS   RS_REP_STATUS%ROWTYPE; -- CIO-825 Bala 8/7/24

   BEGIN
       INSERT_IT_INFO.RDS_REP_NUMBER                   := P_RDS_REP_NUMBER;
       INSERT_IT_INFO.RDS_PCT                          := P_RDS_PCT;
       INSERT_IT_INFO.RDS_PAYOUT_TYPE                  := P_RDS_PAYOUT_TYPE;
       INSERT_IT_INFO.TICKET_CHARGE                    := P_TICKET_CHARGE;  --SW 01/30/2011 BNS-33079 ADDED TO SAVE THE TICKET CHARGES ON THE RDS
       REC_PAYEE            := NULL;
       L_QUAL_CODE          := NULL;
       L_QUAL_CODE_RESTRICTED          := NULL;
       L_QUAL_CODE_APPRPENDRES         := NULL;
       -- CHANGED KS 12/01/06 ISSUE # 559 TO EXCLUDE CAREER CREDITS FROM COMMISSION PROCESSING.
       IF NVL(REC_TRD.GDC_CREDIT_ONLY_IND,'N') <> 'N' THEN
           L_JOINT_SPLIT     := 100;
       ELSIF P_RDS_PAYOUT_TYPE = 'C' AND L_TOTAL_COMM_PCT <> 0 THEN
           L_JOINT_SPLIT     := P_RDS_PCT / L_TOTAL_COMM_PCT * 100;
       ELSE
           L_JOINT_SPLIT     := 100;
       END IF;
       OPEN  RS_REP (P_RDS_REP_NUMBER);
       FETCH RS_REP INTO REC_PAYEE;
       CLOSE RS_REP;
       -- IF OSJ AND 'NOOSJ' SPECIFIED, NEED TO GIVE PCT BACK TO HOUSE
       IF P_RDS_PAYOUT_TYPE = 'O' AND NVL (P_MP_IND, 'X') = 'NOOSJ' THEN
           IF SP_IS_OFFICE_MNGR (REC_TRD.BD
                                 ,REC_RR.OSJ_CODE
                                 ,REC_PAYEE.SSN
                                 ,REC_TRD.TRADE_DATE
                                 ) = 'Y' THEN
               L_TOTAL_OSJ_PCT := L_TOTAL_OSJ_PCT + P_RDS_PCT;
               RETURN;
           END IF;
       END IF;
       L_TITLE_LIC_OVERRIDE          := NULL;
       SELECT SPECIAL_IND_10
       INTO L_TITLE_LIC_OVERRIDE
       FROM SYSTEM_CODES
       WHERE BD                     = REC_TRD.BD
           AND FUNCTION_ID            = 'REPS'
           AND CODE_TYPE              = 'TITLE'
           AND CODE_ID                = REC_PAYEE.TITLE;
--  DG 08/29/08 ISSUE #1853 - NO LICENSING CHECKS ARE REQUIRED WHEN A12B1_IND = 'Y'

        --CIO-825 Pay Termed Rep till stop payment date for configured Spon Code / Group Code Bala - 8/5/24 - Begin
        OPEN  RS_REP_STATUS(P_REP_NUMBER);
        FETCH RS_REP_STATUS INTO V_REP_TERMED_EXCEPTION_STATUS;
        CLOSE RS_REP_STATUS;
        --CIO-825 Bala 8/5/24 End


       --IF  NVL(REC_TRD.A12B1_IND,'N') = 'Y' OR NVL(REC_TRD.MANUAL_HELD_IND,'X') = 'R' OR (P_RDS_REP_NUMBER = L_HOUSE_REP OR NVL(REC_PAYEE.LICENSE_OVERRIDE_IND ,'N') = 'Y' OR NVL(L_TITLE_LIC_OVERRIDE,'N') = 'Y')  THEN -- Code Commented to add condition for CIO-825
       IF  NVL(REC_TRD.A12B1_IND,'N') = 'Y' OR NVL(REC_TRD.MANUAL_HELD_IND,'X') = 'R' OR
                (P_RDS_REP_NUMBER = L_HOUSE_REP OR NVL(REC_PAYEE.LICENSE_OVERRIDE_IND ,'N') = 'Y' OR NVL(L_TITLE_LIC_OVERRIDE,'N') = 'Y') OR
                (NVL(V_REP_TERMED_EXCEPTION_STATUS.STATUS_IND,10)=60 AND L_REP_TERM_EXCEPTION_TRADE=TRUE) THEN --CIO-825 Bala 8/5/24
        L_QUAL_CODE := 1;
       ELSE
           L_QUAL_CODE := SP_CHECK_REP_LIC (REC_TRD.BD
                                           ,REC_PAYEE.SSN
                                           ,REC_TRD.PROD_SPON_CODE
                                           ,REC_TRD.PRODUCT_NUMBER
                                           ,REC_TRD.STATE_CODE
                                           ,REC_TRD.TRADE_DATE
                                           ,REC_TRD.A12B1_IND
                                           );
       END IF;


       /************************************************************************************
       -- BJR 6/6/08 #457: REMOVE LICENSING REASON CODE UPDATES SINCE UNLICENSED COMMISSIONS
       --                  WILL BE REALLOCATED.
       --====================================================================================
       ***/
           L_QUAL_CODE_RESTRICTED := SP_CHECK_REP_LIC_RESTRICTED (REC_TRD.BD
                                           ,REC_PAYEE.SSN
                                           ,REC_TRD.PROD_SPON_CODE
                                           ,REC_TRD.PRODUCT_NUMBER
                                           ,REC_TRD.STATE_CODE
                                           ,REC_TRD.TRADE_DATE
                                           ,REC_TRD.A12B1_IND
                                           ); -- SATHIYA 05/31/2017 BIZREQ2504 AND BIZREQ5089

           L_QUAL_CODE_APPRPENDRES := SP_CHECK_REP_LIC_APPRPENDRES (REC_TRD.BD
                                           ,REC_PAYEE.SSN
                                           ,REC_TRD.PROD_SPON_CODE
                                           ,REC_TRD.PRODUCT_NUMBER
                                           ,REC_TRD.STATE_CODE
                                           ,REC_TRD.TRADE_DATE
                                           ,REC_TRD.A12B1_IND
                                           ); -- SATHIYA 05/31/2017 BIZREQ2504 AND BIZREQ5089


       IF L_QUAL_CODE <> 1 THEN -- FOR LICENSING ERRORS...
         -- EXCLUDE SELECTED OFFICE RANGES
          IF  SP_EXCLUDE_OFFICE_RANGE_UNLIC(REC_TRD.BD, REC_TRD.SPONSOR_ACCT_NUMBER, REC_TRD.TRADE_DATE)
              OR L_REP_NUMBER_TYPE = 'S'                   -- BJR 6/19/08 #457 EXCLUDE SPLIT TRADES FROM REALLOCATION
              OR L_APPROVED_PENDING_PRINTS_IND = 'Y' OR L_QUAL_CODE_RESTRICTED=1 OR L_QUAL_CODE_APPRPENDRES=1 THEN  -- BJR 7/01/08 #457 EXCLUDE APPROVED PENDING PRINTS TRADES FROM REALLOCATION SATHIYA 05/31/2017 BIZREQ2504 AND BIZREQ5089
              IF QUAL_CODE_ERR (L_QUAL_CODE, 2) THEN
                  SELECT CODE_ID INTO L_ERROR_CODE
                  FROM TAPE_ERROR_LIST
                 WHERE UPPER(CODE_SHORT_DESC) LIKE 'HOLD - REP IS NOT NASD SERIES LICENSED!';
                  --ADD NASD SERIES ERROR TO L_TC_ERROR
                  ADD_SOFT_ERROR ( 'REP NUMBER '
                                   || P_RDS_REP_NUMBER
                                   || ' '
                                   || ' IS NOT NASD SERIES LICENSED!  '    --' IS NOT LICENSED!'
                                   || CHR (13) || CHR (10));
                  ADD_SOFT_ERROR_CODE ( L_ERROR_CODE
                                   || CHR (13) || CHR (10));
              END IF;
              IF QUAL_CODE_ERR (L_QUAL_CODE, 4) THEN
                  SELECT CODE_ID INTO L_ERROR_CODE
                  FROM TAPE_ERROR_LIST
                 WHERE UPPER(CODE_SHORT_DESC) LIKE 'HOLD - REP IS NOT NASD STATE REGISTRATION LICENSED!';
                  --ADD NASD STATE REGISTRATION ERROR TO L_TC_ERROR
                  ADD_SOFT_ERROR ( 'REP NUMBER '
                                    || P_RDS_REP_NUMBER
                                    || ' '
                                    || 'IS NOT NASD STATE REGISTRATION LICENSED!  '    --' IS NOT LICENSED!'
                                    || CHR (13) || CHR (10));
                  ADD_SOFT_ERROR_CODE ( L_ERROR_CODE
                                    || CHR (13) || CHR (10));
              END IF;
              IF QUAL_CODE_ERR (L_QUAL_CODE, 8) THEN
                  SELECT CODE_ID INTO L_ERROR_CODE
                  FROM TAPE_ERROR_LIST
                 WHERE UPPER(CODE_SHORT_DESC) LIKE 'HOLD - REP IS NOT INS. APPT LICENSED!';
                  --ADD INS. APPT ERROR TO L_TC_ERROR
                  ADD_SOFT_ERROR ( 'REP NUMBER '
                                    || P_RDS_REP_NUMBER
                                    || ' '
                                    || 'IS NOT INS. APPT LICENSED!  '   --' IS NOT LICENSED!'
                                    || CHR (13) || CHR (10));
                  ADD_SOFT_ERROR_CODE ( L_ERROR_CODE
                                    || CHR (13) || CHR (10));
              END IF;
              IF QUAL_CODE_ERR (L_QUAL_CODE,16) THEN
                  SELECT CODE_ID INTO L_ERROR_CODE
                  FROM TAPE_ERROR_LIST
                 WHERE UPPER(CODE_SHORT_DESC) LIKE 'HOLD - REP IS NOT INSURANCE STATE REGISTRATION LICENSED!';
                  --ADD INSURANCE STATE REGISTRATION ERROR TO L_TC_ERROR
                  ADD_SOFT_ERROR ( 'REP NUMBER '
                                    || P_RDS_REP_NUMBER
                                    || ' '
                                    || 'IS NOT INSURANCE STATE REGISTRATION LICENSED!  '  --' IS NOT LICENSED!'
                                    || CHR (13) || CHR (10));
                  ADD_SOFT_ERROR_CODE ( L_ERROR_CODE
                                    || CHR (13) || CHR (10));
              END IF;
              UPDATE TRADES
              SET HELD_IND = 'Y'
                 ,HELD_REASON = P_SOFT_ERROR
                 ,HELD_REASON_CODE = P_SOFT_ERROR_CODE  -- TRADE SEARCH LATENCY ISSUE
              WHERE TRADE_ID = P_TRADE_ID;

          END IF;
       END IF;
       ----------------------------------------
       L_COMM    := 0;
-- Commented by Sasi for BNS-24746:04/04/2016 - Start
--       IF REC_TRD.FEE_CODE ='ACCOM' THEN
--          REC_TRD.GDC_AMT := 0;
--       END IF;
-- Commented by Sasi for BNS-24746:04/04/2016 - End

       --SW 06/16/2014 MODIFIED TO REMOVE THE ROUNDING ERROR FOR SINGLE TRADE MULTIPLE EXECUTION
       --IF REC_TRD.SPON_CODE ='910' AND REC_TRD.GDC_AMT = REC_TRD.FEE_AMT THEN
--       IF REC_TRD.SPON_CODE ='910' AND (REC_TRD.GDC_AMT = REC_TRD.FEE_AMT OR ABS(REC_TRD.GDC_AMT-REC_TRD.FEE_AMT)<=.03) THEN
       --IF REC_TRD.SPON_CODE ='910' AND (REC_TRD.GDC_AMT = REC_TRD.FEE_AMT OR (ABS(REC_TRD.GDC_AMT-REC_TRD.FEE_AMT)<=.03 AND IS_ICC_OFFICE_RANGE(SUBSTR(REC_TRD.SPONSOR_ACCT_NUMBER, 1, 3),'ICC_ADV_TICKET_CHARGE',P_TRADE_ID,TRUE) = FALSE )) THEN
       IF REC_TRD.SPON_CODE ='910' AND (REC_TRD.GDC_AMT = REC_TRD.FEE_AMT OR ABS(REC_TRD.GDC_AMT-REC_TRD.FEE_AMT)<=.03) THEN
          -- NO FEES OR COMMISSION
          L_COMM := 0;
          L_TICKET_CHARGE_AMT :=0;--ADDED BY NIIT AGAINST ISSUE NO. 1391
          --REC_TRD.FEE_AMT := 0;
          -- CHANGED KS 12/01/06 ISSUE # 559 TO EXCLUDE CAREER CREDITS FROM COMMISSION PROCESSING.
       ELSIF NVL(REC_TRD.GDC_CREDIT_ONLY_IND,'N') <> 'N' THEN
          -- NO FEES OR COMMISSION
          L_COMM := 0;
          L_TICKET_CHARGE_AMT :=0;--ADDED BY NIIT AGAINST ISSUE NO. 1391
       ELSIF L_FEE_FORMULA = 'A' THEN
          -- CHARGE EVERYONE INCLUDING HOUSE
          L_COMM := (REC_TRD.GDC_AMT - REC_TRD.FEE_AMT) * (P_REP_SPLIT / 100) * (P_RDS_PCT / 100);
                     L_TICKET_CHARGE_AMT :=(REC_TRD.FEE_AMT) * (P_REP_SPLIT / 100) * (P_RDS_PCT / 100);--ADDED BY NIIT AGAINST ISSUE NO. 1391
          L_IS_CONFIG_TICHARG_FLAG := TRUE;   --SW 02/03/2012 BNS-33079 ADDED TO DEDUCT THE TICKET CHARGE AS PER THE RDS
       ELSIF L_FEE_FORMULA = 'B' THEN
          -- CHARGE EVERYONE EXCLUDING HOUSE
          IF P_RDS_REP_NUMBER = L_HOUSE_REP THEN
             L_COMM := REC_TRD.GDC_AMT * (P_REP_SPLIT / 100) * (P_RDS_PCT / 100);
             L_TICKET_CHARGE_AMT :=0;--ADDED BY NIIT AGAINST ISSUE NO. 1391
          ELSIF L_TOTAL_EXC_HOUSE_PCT = 0 THEN
             L_COMM :=0;
             L_TICKET_CHARGE_AMT :=0;--ADDED BY NIIT AGAINST ISSUE NO. 1391
          ELSE
               L_COMM := (REC_TRD.GDC_AMT * P_REP_SPLIT * P_RDS_PCT / 10000)
                       - (REC_TRD.FEE_AMT * (P_REP_SPLIT / 100) * (P_RDS_PCT / L_TOTAL_EXC_HOUSE_PCT));
               L_TICKET_CHARGE_AMT :=REC_TRD.FEE_AMT * (P_REP_SPLIT / 100) * (P_RDS_PCT / L_TOTAL_EXC_HOUSE_PCT);--ADDED BY NIIT AGAINST ISSUE NO. 1391
             END IF;
          L_IS_CONFIG_TICHARG_FLAG := TRUE;   --SW 02/03/2012 BNS-33079 ADDED TO DEDUCT THE TICKET CHARGE AS PER THE RDS
       ELSIF L_FEE_FORMULA = 'C' THEN
          -- ONLY CHARGE REPS
          IF P_RDS_PAYOUT_TYPE = 'C' THEN
             IF L_TOTAL_COMM_PCT = 0 THEN
                L_COMM :=0;
                L_FEE_FORMULA := 'Z';   --ADDED KS 04/15/2008 ISSUE #1663 TO ALLOCATE TICKET CHARGE TO HIGHEST OVERRIDE FOR ZERO PAY REPS
                L_TICKET_CHARGE_AMT :=0;--ADDED BY NIIT AGAINST ISSUE NO. 1391
             ELSE
                  L_COMM := (REC_TRD.GDC_AMT * P_REP_SPLIT * P_RDS_PCT / 10000)
                         - (REC_TRD.FEE_AMT * (P_REP_SPLIT / 100) * (P_RDS_PCT / L_TOTAL_COMM_PCT));
                  L_TICKET_CHARGE_AMT := REC_TRD.FEE_AMT * (P_REP_SPLIT / 100) * (P_RDS_PCT / L_TOTAL_COMM_PCT);--ADDED BY NIIT AGAINST ISSUE NO. 1391
                END IF;
          ELSE
             L_COMM := REC_TRD.GDC_AMT * (P_REP_SPLIT / 100) * (P_RDS_PCT / 100);
             L_TICKET_CHARGE_AMT := 0;  -- BJR 12/17/2007: ISSUE 1391, RESETTING VARIABLE TO ZERO WITHIN LOOP IS NECESSARY
          END IF;
          L_IS_CONFIG_TICHARG_FLAG := TRUE;   --SW 02/03/2012 BNS-33079 ADDED TO DEDUCT THE TICKET CHARGE AS PER THE RDS
       ELSIF L_FEE_FORMULA = 'Z' THEN --KS ISSUE # 1663 CHARGE REP WITH HIGHEST OVERRIDE PCT FOR REP AT ZERO RDS.
          L_TICKET_CHARGE_AMT :=0;
          IF P_RDS_PAYOUT_TYPE = 'O'  THEN
             L_COMM := REC_TRD.GDC_AMT * (P_REP_SPLIT / 100) * (P_RDS_PCT / 100);
          END IF;
          IF P_RDS_REP_NUMBER <> L_HOUSE_REP AND P_RDS_PAYOUT_TYPE = 'O'  THEN
             OPEN RS_OVERRIDE_REPS(L_RDS_ID,L_HOUSE_REP);
             FETCH RS_OVERRIDE_REPS INTO LP_OVERRIDE_REP;
             IF RS_OVERRIDE_REPS%NOTFOUND THEN
                LP_OVERRIDE_REP := '';
             END IF;
             CLOSE RS_OVERRIDE_REPS ;
             IF P_RDS_REP_NUMBER = LP_OVERRIDE_REP THEN
                 L_TICKET_CHARGE_AMT := REC_TRD.FEE_AMT * (P_REP_SPLIT / 100);
                 L_COMM := L_COMM - L_TICKET_CHARGE_AMT;
                 L_IS_CONFIG_TICHARG_FLAG := TRUE;   --SW 02/03/2012 BNS-33079 ADDED TO DEDUCT THE TICKET CHARGE AS PER THE RDS
             END IF;
          END IF;
         L_IS_CONFIG_TICHARG_FLAG := TRUE;   --SW 02/03/2012 BNS-33079 ADDED TO DEDUCT THE TICKET CHARGE AS PER THE RDS
       END IF;
       --SW 01/30/2011 BNS-33079 ADDED TO CHECK IF THE TICKET CHARGES ARE DEFINE ON THE RDS LEVEL AND CALCULATE THEM ON THE RDS LEVEL
       IF L_IS_CONFIG_TICHARG_FLAG THEN
          IF IS_TICKET_CHARGE_ON_RDS THEN
            L_TICKET_CHARGE_AMT := REC_TRD.FEE_AMT * (P_REP_SPLIT / 100) * (NVL(P_TICKET_CHARGE,0) / 100);
            L_COMM := (REC_TRD.GDC_AMT) * (P_REP_SPLIT / 100) * (P_RDS_PCT / 100)-NVL(L_TICKET_CHARGE_AMT,0) ;
          END IF;
       END IF;

--       @Sasi : Bns - 66748 --Start
       OPEN  RS_REP_STATUS(P_REP_NUMBER_OF_RECORD); ----@Sasi :BNS-147:06/02/2016
       FETCH RS_REP_STATUS INTO V_RNR_STATUS;
       CLOSE RS_REP_STATUS;

       IF P_RDS_PAYOUT_TYPE = 'C' AND P_RDS_PCT > 0  AND L_TICKET_CHARGE_AMT > 0 THEN
          SP_TC_WAIVER(P_TRADE_ID,P_REP_NUMBER_OF_RECORD,P_RDS_REP_NUMBER,REC_PAYEE.SSN,P_REP_SPLIT,L_JOINT_SPLIT,V_RNR_STATUS.STATUS_IND,L_COMM,L_TICKET_CHARGE_AMT); --@Sasi : Bns - 66748
       END IF;
       --@Sasi : Bns - 66748 -- End
                    ----------------------------------------

         SELECT MAX (TC_ID)
           INTO L_TC_ID
           FROM TRADECOMM_TMP
          WHERE TRADE_ID = P_TRADE_ID;
         L_TC_ID := NVL (L_TC_ID, 0) + 1;
           INSERT INTO TRADECOMM_TMP
              (TRADE_ID
              ,TC_ID
              ,RDS_ID
              ,REP_NUMBER_OF_RECORD
              ,PARTICIPANT_REP_NUMBER
              ,PAYEE_REP_NUMBER
              ,PAYEE_SSN
              ,OFFICE_CODE
              ,REP_SPLIT_PCT
              ,JOINT_SPLIT_PCT
              ,QUAL_CODE
              ,PAYOUT_TYPE
              ,COMMISSION_PCT
              ,COMMISSION_AMT
              ,PAID_IND
              ,TICKET_CHARGE_AMT   -- ADDED BY NIIT ON 04-DEC-2007 AGAINST ISSUE NO- 1391.
              ) VALUES
              (P_TRADE_ID
              ,L_TC_ID
              ,L_RDS_ID
              ,P_REP_NUMBER_OF_RECORD
              ,P_REP_NUMBER
              ,P_RDS_REP_NUMBER
              ,REC_PAYEE.SSN
              ,REC_RR.OFFICE_CODE
              ,P_REP_SPLIT
              ,L_JOINT_SPLIT
              ,L_QUAL_CODE
              ,P_RDS_PAYOUT_TYPE
              ,P_RDS_PCT
              ,L_COMM
              ,'N'
              , L_TICKET_CHARGE_AMT
              );
      END;
   -- 11/17/07 BJR: ISSUE 813 FIXED INSURANCE FOR ORPHAN REPS
   PROCEDURE ALLOCATE_FIXED_INSURANCE (
             P_REP_OF_RECORD_VESTED_IND  REPS_STATUS.TERM_VESTED_IND%TYPE
            ,P_PARTICIPANT_ACTIVE_IND    VARCHAR2
            ,P_PARTICIPANT_VESTED_IND    VARCHAR2
            ,P_TERM_ORPHAN_REP_NUMBER    REPS_STATUS.TERM_ORPHAN_REP_NUMBER%TYPE
            ,P_RDS_REP_NUMBER            RDS_DETAILS.REP_NUMBER%TYPE
            ,P_RDS_PAYOUT_PERCENTAGE     RDS_DETAILS.PAYOUT_PERCENTAGE%TYPE
            ,P_RDS_PAYOUT_TYPE           RDS_DETAILS.PAYOUT_TYPE%TYPE
            ,P_HOUSE_REP                 REPS_NUMBERS.REP_NUMBER%TYPE
            )  IS
   -- BJR 11/17/2007: ISSUE 813 FIXED INSURANCE ORPHANING.
   /*******************************************************************************************************
     THE SCENARIOS ARE DESCRIBED IN THE 813/1065 REQUIREMENTS DOCUMENT.
     ISSUE 1065:
        WHEN A FIXED INSURANCE TRADE IS PROCESSED FOR A TERMINATED VESTED REP THE PAYOUT LOGIC
        SHOULD CHECK THE STATUS (ACTIVE OR NOT) OF ALL THE PARTICIPANTS ON THE RDS AND PAY
        ACCORDING TO THE FOLLOWING RULES:
            PAY THE PARTICIPANT PER THE REPS' RDS IF THE PARTICIPANT IS ACTIVE ON THE RDS (SCENARIO 3)
            PAY THE  PARTICIPANT PER THE REPS' RDS  IF THE PARTICIPANT IS NOT ACTIVE BUT VESTED (SCENARIO 4)
            PAY THE PARTICIPANT'S PORTION TO THE HOUSE IF THE PARTICIPANT IS NOT ACTIVE AND NOT VESTED (SCENARIO 5)
     ISSUE 813:
        WHEN A FIXED INSURANCE TRADE IS PROCESSED FOR A TERMINATED NON-VESTED REP THE PAYOUT
        LOGIC SHOULD CHECK TO SEE IF ANY ORPHAN IS ASSIGNED AND PAY ACCORDING TO THE FOLLOWING RULES:
            PAY ALL TO THE HOUSE IF NO ORPHAN IS ASSIGNED (SCENARIO 6)
            PAY ALL TO THE HOUSE IF THE ORPHAN HAS REACHED ITS STOP PAYMENT DATE (SCENARIO 8)
            PAY OUT PER ORPHAN REP'S RDS IF THE ORPHAN HAS NOT REACHED ITS STOP PAYMENT DATE (SCENARIO 9)
    *******************************************************************************************************/
   BEGIN
       IF P_REP_OF_RECORD_VESTED_IND = 'Y' THEN                                                      -- REP OF RECORD IS VESTED...
           IF P_PARTICIPANT_ACTIVE_IND = 'Y' THEN                                           -- PARTICIPANT REP IS ACTIVE
               INSERT_IT ( P_RDS_REP_NUMBER, P_RDS_PAYOUT_PERCENTAGE,  P_RDS_PAYOUT_TYPE ); -- PAY RDS PARTICIPANT (SCENARIO 3)
           ELSE       -- PARTICIPANT IS NOT ACTIVE
               IF P_PARTICIPANT_VESTED_IND = 'Y' THEN                                                -- PARTICIPANT IS VESTED...
                   INSERT_IT ( P_RDS_REP_NUMBER, P_RDS_PAYOUT_PERCENTAGE,  P_RDS_PAYOUT_TYPE );  -- PAY INACTIVE VESTED RDS PARTICIPANT (SCENARIO 4)
               ELSE   -- PARTICIPANT IS NOT VESTED ...
                   INSERT_IT ( P_HOUSE_REP, P_RDS_PAYOUT_PERCENTAGE,  P_RDS_PAYOUT_TYPE );  -- PAY HOUSE (SCENARIO 5)
               END IF;
           END IF;
       ELSE    -- REP OR RECORD IS NOT VESTED                                                               --  REP OF RECORD NOT VESTED
           IF P_TERM_ORPHAN_REP_NUMBER IS NULL THEN
              INSERT_IT ( P_HOUSE_REP, P_RDS_PAYOUT_PERCENTAGE,  P_RDS_PAYOUT_TYPE );  -- PAY HOUSE (SCENARIO 6)
           ELSIF SP_STOP_PAYMENT_DATE_REACHED(P_TERM_ORPHAN_REP_NUMBER) THEN           -- IS ORPHAN STOP PAYMENT REACHED
              INSERT_IT ( P_HOUSE_REP, P_RDS_PAYOUT_PERCENTAGE,  P_RDS_PAYOUT_TYPE );  -- PAY HOUSE (SCENARIO 8)
           ELSE                                                                                      -- STOP PAYMENT NOT REACHED
              INSERT_IT ( P_RDS_REP_NUMBER, P_RDS_PAYOUT_PERCENTAGE,  P_RDS_PAYOUT_TYPE ); -- PAY ACCORDING TO ORPHAN REP'S RDS (SCENARIO 9)
           END IF;
       END IF;
   END;  --  ALLOCATE_FIXED_INSURANCE
   PROCEDURE ADD_MISSING_REPS IS
      L_REP_NUM         REPS_NUMBERS.REP_NUMBER%TYPE;
      L_TMP1 NUMBER; --BIZREQ 7037 AND BIZREQ 5916 PHANTOM ROW ELIMINATION FIX SATHIYA 12 JAN 2018 START
      CURSOR RS_TMP1 (P_JOINT_REP_NUM REPS_NUMBERS.REP_NUMBER%TYPE) IS
         SELECT COUNT(*) AS CNT
           FROM BONUS.REPS_NUMBERS
          WHERE BD=REC_TRD.BD
            AND STATUS_IND = '10'
            AND SPLIT_IND LIKE 'Y'
            AND REP_NUMBER=P_JOINT_REP_NUM; --BIZREQ 7037 AND BIZREQ 5916 PHANTOM ROW ELIMINATION FIX SATHIYA 12 JAN 2018 END

      CURSOR RS_1 (P_SSN REPS_NUMBERS.SSN%TYPE) IS
         SELECT RD.REP_NUMBER
           FROM RDS, RDS_DETAILS RD, REPS_NUMBERS RN
          WHERE RDS.RDS_ID     = RD.RDS_ID
            AND RN.BD          = REC_TRD.BD
            AND RN.REP_NUMBER  = RD.REP_NUMBER
            AND RDS_TYPE       = 'I'
            AND RDS.REP_NUMBER = P_REP_NUMBER
            AND RD.REP_NUMBER <> P_REP_NUMBER
            AND RN.SSN         = P_SSN
          GROUP BY RD.REP_NUMBER
          ORDER BY COUNT(*);
      BEGIN
         IF L_RDS_TYPE = 'I' AND REC_PARTICIPANT.SPLIT_IND = 'Y' THEN
            OPEN  RS_TMP1(P_REP_NUMBER);  --BIZREQ 7037 AND BIZREQ 5916 PHANTOM ROW ELIMINATION FIX SATHIYA 12 JAN 2018 START
            FETCH RS_TMP1 INTO L_TMP1;
            CLOSE RS_TMP1;
            IF L_TMP1 >1 THEN  --BIZREQ 7037 AND BIZREQ 5916 PHANTOM ROW ELIMINATION FIX SATHIYA 12 JAN 2018 END
            -- INSERT ANY REPS NOT LISTED ON RDS AT ZERO PCT
            FOR REC IN (SELECT SSN
                          FROM REPS_NUMBERS
                         WHERE BD = REC_TRD.BD
                           AND REP_NUMBER = P_REP_NUMBER
                           AND START_DATE <= REC_TRD.CREATE_DATE
                           AND (STOP_PAYMENT_DATE IS NULL
                                 OR STOP_PAYMENT_DATE >= REC_TRD.CREATE_DATE)
                           AND SSN NOT IN (SELECT SSN
                                             FROM REPS_NUMBERS RN2
                                                 ,RDS_DETAILS  RD
                                            WHERE RN2.BD = REC_TRD.BD
                                              AND RN2.REP_NUMBER = RD.REP_NUMBER
                                              AND RD.RDS_ID = L_RDS_ID
                                              AND RD.REP_NUMBER <> P_REP_NUMBER)
                       ) LOOP
               -- FIND REP NUMBER FROM OTHER RDS OR USE PRIMARY
               L_REP_NUM := NULL;
               OPEN  RS_1 (REC.SSN);
               FETCH RS_1 INTO L_REP_NUM;
               CLOSE RS_1;
               IF L_REP_NUM IS NULL THEN
                  L_REP_NUM := SP_GET_REP_PRIMARY_NUMBER (REC_TRD.BD, REC.SSN);
               END IF;
               IF L_REP_NUM IS NOT NULL THEN
                  INSERT_IT (L_REP_NUM
                            ,0
                            ,'C'
                            );
               END IF;
            END LOOP;
         END IF; --BIZREQ 7037 AND BIZREQ 5916 PHANTOM ROW ELIMINATION FIX SATHIYA 12 JAN 2018
         END IF;
      END;
   PROCEDURE PROCESS_BP_REP (L_BP_RDS_ID RDS.RDS_ID%TYPE
                            ,L_BP_GDC_PCT RDS_DETAILS.PAYOUT_PERCENTAGE%TYPE
                            ) IS
   -- CG : REP BREAKPOINTS PROCESSING
       LP_ORPHAN_REP            REPS_NUMBERS.TERM_ORPHAN_REP_NUMBER%TYPE;
       LP_TOTAL_OSJ_PCT         DECIMAL (5, 2) := 0;
       LP_REP_STATUS            RS_REP_STATUS%ROWTYPE;
       LP_PARTICIPANT_STATUS    RS_REP_STATUS%ROWTYPE;  -- BJR 11/08/2007 - #813  PARTICIPANT STATUS
       LP_SUB_BP_RDS_ID         RDS.RDS_ID%TYPE;
       LP_PARTICIPANT_ACTIVE_IND    VARCHAR2 (1);    -- BJR 11/08/2007 #813 RDS PARTICIPANT ACTIVE?
       LP_REP_OF_RECORD_VESTED_IND  VARCHAR (1);     -- BJR 11/08/2007 #813 TRADE REP OF RECORD VESTED
       LP_PARTICIPANT_VESTED_IND    VARCHAR (1);     -- BJR 11/08/2007 #813 RDS PARTICIPANT REP VESTED
   BEGIN
       -- BJR 11/08/2007 - #813 PRE QUERY REP OF RECORD STATUS
       LP_REP_STATUS := NULL;
       OPEN RS_REP_STATUS(P_REP_NUMBER);
       FETCH RS_REP_STATUS INTO LP_REP_STATUS;
       CLOSE RS_REP_STATUS;
       -- LOOP THROUGH THE BP REP'S RDS DETAILS
       FOR REC_BP_RDS IN
           (SELECT RD.REP_NUMBER
                  ,RD.PAYOUT_PERCENTAGE
                  ,RD.PAYOUT_TYPE
            FROM RDS_DETAILS RD
            WHERE RD.RDS_ID = L_BP_RDS_ID
            ORDER BY DECODE (RD.REP_NUMBER, L_HOUSE_REP, 2, 1) ASC -- HOUSE MUST BE LAST !!
                    ,PAYOUT_TYPE  ASC
           ) LOOP
           -- NO SPLIT #'S ALLOWED
           -- IF THE HOUSE REP, INSERT THE TRADECOMM
          IF REC_BP_RDS.REP_NUMBER = L_HOUSE_REP THEN
              INSERT_IT (L_HOUSE_REP
                        ,REC_BP_RDS.PAYOUT_PERCENTAGE * L_BP_GDC_PCT/100
                        ,REC_BP_RDS.PAYOUT_TYPE
                        );
          ELSE -- NOT THE HOUSE REP AND NOT A SPLIT #
              -- BJR 11/08/2007 - ADD PARTICIPANT STATUS RECORD
              LP_PARTICIPANT_STATUS  := NULL;
              OPEN  RS_REP_STATUS(REC_BP_RDS.REP_NUMBER);
              FETCH RS_REP_STATUS INTO LP_PARTICIPANT_STATUS;
              CLOSE RS_REP_STATUS;
              -- BJR 11/08/07: #813 - RETRIEVE REP OF RECORD AND RDS PARTICIPANT VESTED AND ACTIVE STATUS
              LP_REP_OF_RECORD_VESTED_IND := SP_REP_VESTED(P_REP_NUMBER);
              LP_PARTICIPANT_ACTIVE_IND   := SP_REP_ACTIVE(REC_BP_RDS.REP_NUMBER);
              LP_PARTICIPANT_VESTED_IND   := SP_REP_VESTED(REC_BP_RDS.REP_NUMBER);
              -- BJR 11/20/07: ISSUE 813 FIXED INSURANCE ORPHAN RULES FOR TRADES BY TERMED REPS PAST STOP PAMENT DATE ONLY
              IF REC_TRD.GROUP_CODE = 'F' AND
                  LP_REP_STATUS.STATUS_IND = 60 AND
                  REC_TRD.CREATE_DATE > LP_REP_STATUS.STOP_PAYMENT_DATE  THEN
                   -- BJR 11/17/07: COMMON LOGIC FOR FIXED INSURANCE ORPHANING
                   ALLOCATE_FIXED_INSURANCE ( LP_REP_OF_RECORD_VESTED_IND
                                             ,LP_PARTICIPANT_ACTIVE_IND
                                             ,LP_PARTICIPANT_VESTED_IND
                                             ,LP_REP_STATUS.TERM_ORPHAN_REP_NUMBER
                                             ,REC_BP_RDS.REP_NUMBER
                                             ,REC_BP_RDS.PAYOUT_PERCENTAGE
                                             ,REC_BP_RDS.PAYOUT_TYPE
                                             ,L_HOUSE_REP );
              ELSIF (LP_PARTICIPANT_STATUS.STATUS_IND  <> 60)
                  OR (REC_BP_RDS.REP_NUMBER = P_REP_NUMBER)
                  OR (REC_TRD.CREATE_DATE <= LP_REP_STATUS.STOP_PAYMENT_DATE) THEN
                  INSERT_IT (REC_BP_RDS.REP_NUMBER
                            ,REC_BP_RDS.PAYOUT_PERCENTAGE * L_BP_GDC_PCT/100
                            ,REC_BP_RDS.PAYOUT_TYPE
                            );
              ELSE
                  L_IS_TERMED_REP__ON_RDS := TRUE;
                  IF L_TERMED_REPS_ON_RDS IS NULL THEN
                      L_TERMED_REPS_ON_RDS := REC_BP_RDS.REP_NUMBER;
                  ELSE
                      L_TERMED_REPS_ON_RDS := L_TERMED_REPS_ON_RDS || ',' || REC_BP_RDS.REP_NUMBER;
                  END IF;
                  INSERT_IT (L_HOUSE_REP
                            ,REC_BP_RDS.PAYOUT_PERCENTAGE * L_BP_GDC_PCT/100
                            ,REC_BP_RDS.PAYOUT_TYPE
                  );
              END IF;
          END IF;
      END LOOP;
   END;  -- PROCESS_BP_REP
   PROCEDURE MOVE_FROM_TC_TMP_TO_TC IS
   BEGIN
      INSERT INTO TRADECOMM
           (
            TRADE_ID
           ,TC_ID
           ,RDS_ID
           ,REP_NUMBER_OF_RECORD
           ,PARTICIPANT_REP_NUMBER
           ,PAYEE_REP_NUMBER
           ,PAYEE_SSN
           ,OFFICE_CODE
           ,REP_SPLIT_PCT
           ,QUAL_CODE
           ,PAYOUT_TYPE
           ,COMMISSION_PCT
           ,COMMISSION_AMT
           ,PAID_DATE
           ,PAID_IND
           ,CHECK_EFT_IND
           ,CHECK_EFT_REF_NO
           ,PRODUCTION_CREDIT_AMT
           ,PRODUCTION_CREDIT_DATE
           ,JOINT_SPLIT_PCT
           ,TICKET_CHARGE_AMT    -- ADDED BY NIIT AGAINST ISSUE NO.1391
           )
      SELECT
          TRADE_ID
         ,MIN(TC_ID)
         ,RDS_ID
         ,REP_NUMBER_OF_RECORD
         ,PARTICIPANT_REP_NUMBER
         ,PAYEE_REP_NUMBER
         ,PAYEE_SSN
         ,OFFICE_CODE
         ,REP_SPLIT_PCT
         ,QUAL_CODE
         ,PAYOUT_TYPE
         ,SUM(COMMISSION_PCT)
         ,SUM(COMMISSION_AMT)
         ,PAID_DATE
         ,PAID_IND
         ,CHECK_EFT_IND
         ,CHECK_EFT_REF_NO
         ,PRODUCTION_CREDIT_AMT
         ,PRODUCTION_CREDIT_DATE
         ,JOINT_SPLIT_PCT
         ,TICKET_CHARGE_AMT    -- ADDED BY NIIT AGAINST ISSUE NO.1391
      FROM BONUS.TRADECOMM_TMP
      WHERE TRADE_ID = P_TRADE_ID
      GROUP BY
          TRADE_ID
         ,RDS_ID
         ,REP_NUMBER_OF_RECORD
         ,PARTICIPANT_REP_NUMBER
         ,PAYEE_REP_NUMBER
         ,PAYEE_SSN
         ,OFFICE_CODE
         ,REP_SPLIT_PCT
         ,QUAL_CODE
         ,PAYOUT_TYPE
         ,PAID_DATE
         ,PAID_IND
         ,CHECK_EFT_IND
         ,CHECK_EFT_REF_NO
         ,PRODUCTION_CREDIT_AMT
         ,PRODUCTION_CREDIT_DATE
         ,JOINT_SPLIT_PCT
         ,TICKET_CHARGE_AMT    -- ADDED BY NIIT AGAINST ISSUE NO.1391
                     ;
        DBMS_OUTPUT.PUT_LINE('Calling SP_Build_tc');
      --SP_TC_WAIVER(P_TRADE_ID); --@Sasi : Bns - 66748
      DELETE FROM TRADECOMM_TMP WHERE TRADE_ID = P_TRADE_ID;
   END;
   --ADDED KS ISSUE # 1081 TO CLEAR TEMP TC AFTER HOLD.
   PROCEDURE CLEAR_TC_TMP IS
   BEGIN
      DELETE FROM TRADECOMM_TMP WHERE TRADE_ID =  P_TRADE_ID;
   END;
   BEGIN  -- SP_BUILD_TC
       L_SAVE_SOFT_ERROR         := P_SOFT_ERROR;
       L_SAVE_SOFT_ERROR_CODE    := P_SOFT_ERROR_CODE;
       L_IS_BP_REP_FLAG           := FALSE; -- 4/18/05 CG:  BREAKPOINT REPS
       --
       -- GET TRADE INFORMATION
       --
       OPEN  RS_TRADE;
       FETCH RS_TRADE INTO REC_TRD;
       IF RS_TRADE%NOTFOUND THEN
          CLOSE RS_TRADE;
          P_HARD_ERROR := 'TRADE NOT FOUND!';
          RETURN;
       END IF;
       CLOSE RS_TRADE;
       --@Sasi : BON - 292- Start
       IF IS_ICC_OFFICE_RANGE(SUBSTR(REC_TRD.SPONSOR_ACCT_NUMBER, 1, 3),'ICC_ADV_TICKET_CHARGE',P_TRADE_ID,TRUE) = TRUE  THEN
       -- OR  (ABS(REC_TRD.FEE_AMT-REC_TRD.GDC_AMT) > 0 and ABS(REC_TRD.FEE_AMT-REC_TRD.GDC_AMT) <= .03)
--         IF (REC_TRD.FEE_AMT > REC_TRD.GDC_AMT AND REC_TRD.GDC_AMT > 0) OR  (ABS(REC_TRD.FEE_AMT-REC_TRD.GDC_AMT) > 0 and ABS(REC_TRD.FEE_AMT-REC_TRD.GDC_AMT) <= .03) THEN
--        IF (REC_TRD.FEE_AMT > REC_TRD.GDC_AMT AND REC_TRD.GDC_AMT > 0) OR  (ABS(REC_TRD.FEE_AMT-REC_TRD.GDC_AMT) > .03) THEN
        IF (REC_TRD.FEE_AMT > REC_TRD.GDC_AMT AND REC_TRD.GDC_AMT > 0 AND ABS(REC_TRD.FEE_AMT-REC_TRD.GDC_AMT) > .03) THEN
            L_NOTES := 'ORIG TC = '||REC_TRD.FEE_AMT || ' AND ORIG GDC = ' || REC_TRD.GDC_AMT ;
            L_FEE_AMT := REC_TRD.FEE_AMT - REC_TRD.GDC_AMT;
            IF L_FEE_AMT <= .03 THEN
              L_FEE_AMT := 0;
            END  IF;
            REC_TRD.GDC_AMT := 0;
            REC_TRD.FEE_AMT := L_FEE_AMT;
            UPDATE TRADES SET FEE_AMT = L_FEE_AMT,GDC_AMT =0,NOTES = L_NOTES WHERE TRADE_ID  = P_TRADE_ID;
         END IF;
       END IF;
       --@Sasi : BON - 292- End
       -- BJR 7/1/08 #457: DETERMINE IF IT IS INDIVIDUAL, JOINT OR SPLIT BASED TRADE
       L_REP_NUMBER_TYPE := SP_REP_NUMBER_TYPE(REC_TRD.BD, P_REP_NUMBER_OF_RECORD);
       L_APPROVED_PENDING_PRINTS_IND := SP_IS_NASD_PENDING_PRINTS(
                                                   REC_TRD.BD
                                                  ,P_REP_NUMBER_OF_RECORD
                                                  ,REC_TRD.PROD_SPON_CODE
                                                  ,REC_TRD.PRODUCT_NUMBER
                                                  ,REC_TRD.STATE_CODE
                                                  ,REC_TRD.TRADE_DATE
                                                  ,REC_TRD.A12B1_IND
                                                  ,L_REP_NUMBER_TYPE);
       L_APPROVED_PENDING_PRINTS_IND := 'N'; -- SATHIYA 05/31/2017 BIZREQ2504 AND BIZREQ5089
       --
       -- GET BD INFORMATION
       OPEN  RS_REP (P_REP_NUMBER);
       FETCH RS_REP INTO REC_PARTICIPANT;
       CLOSE RS_REP;
       L_FEE_FORMULA := NULL;
       L_HOUSE_REP   := NULL;
       SELECT FEE_DEDUCTION_FORMULA, RDS_HOUSE_REP_NUMBER, ORPHAN_REP_PERIOD
       INTO L_FEE_FORMULA        , L_HOUSE_REP          ,L_ORPHAN_REP_PERIOD  -- CG; 12/13/05: ISSUE 392
       FROM BD
       WHERE BD_NUMBER = REC_TRD.BD;
       L_FEE_FORMULA   := NVL (L_FEE_FORMULA, 'A');
                      /************************************************************************************************************
                         1. ADDED BY NIIT ON 03-DEC-2007 AGAINST ISSUE NO. 1391. BELOW GIVEN QUERY WILL RETURN THE NO. OF RECORDS IN
                         VW_TICKET_FORMULA_EXCEPTION FOR A GIVEN REGION AND BD. IF IT RETURNS ONLY ONE RECORD THEN THE VALUE OF
                         REGION WILL BE TAKEN FROM VW_TICKET_FORMULA_EXCEPTION VIEW ELSE THE VALUE FROM BD WILL BE USED
                        ************************************************************************************************************/
                        --CHANGED AGAINST ISSUE NO 1391 STARTED FROM HERE
                        SELECT COUNT(1)
                        INTO L_EXCEPTION_COUNT
                        FROM VW_TICKET_FORMULA_EXCEPTION E
                        WHERE SUBSTR(REC_PARTICIPANT.OFFICE_CODE, 1, 2) = E.REGION
                        AND E.BD = REC_PARTICIPANT.BD
                        AND (REC_TRD.CREATE_DATE BETWEEN E.START_DATE AND E.TERM_DATE OR E.TERM_DATE IS NULL);
         IF L_EXCEPTION_COUNT = 1 THEN
                        SELECT TICKET_CHARGE_FORMULA INTO L_FEE_FORMULA
                         FROM BONUS.VW_TICKET_FORMULA_EXCEPTION E
                         WHERE REGION = SUBSTR(REC_PARTICIPANT.OFFICE_CODE, 1, 2)
                         AND E.BD = REC_PARTICIPANT.BD
             AND (REC_TRD.CREATE_DATE BETWEEN E.START_DATE AND E.TERM_DATE OR E.TERM_DATE IS NULL);
         END IF ;
                   --CHANGED AGAINST ISSUE NO 1391 ENDED FROM HERE
       --
       -- GET REP INFORMATION
       --
       OPEN  RS_REP (P_REP_NUMBER_OF_RECORD);
       FETCH RS_REP INTO REC_RR;
       CLOSE RS_REP;
/*     OPEN  RS_REP (P_REP_NUMBER);
       FETCH RS_REP INTO REC_PARTICIPANT;
       CLOSE RS_REP;
  */     --
       OPEN  RS_REP_HOLD_IND (P_REP_NUMBER);
       FETCH RS_REP_HOLD_IND INTO L_HOLD_PAYMENT_IND;
       CLOSE RS_REP_HOLD_IND;
                       -- CG: DEBUGGING SINGLE TRADE IN BATCH
       /*IF P_TRADE_ID = 20528711 THEN
         L_RDS_ID:=NULL;
         END IF;*/

        --CIO-825 Identify Trade to Pay Termed Rep till Stop Payment Date for configured Spon Code / Group Code -- Bala 8/5/24 - Begin

        OPEN  RS_REP_STATUS(P_REP_NUMBER);
        FETCH RS_REP_STATUS INTO V_REP_EXCEPTION_STATUS;
        CLOSE RS_REP_STATUS;

        IF (NVL(V_REP_EXCEPTION_STATUS.STATUS_IND,10)=60) THEN
            L_REP_TERM_EXCEPTION_TRADE := SP_IS_REP_TERM_EXCEPTION_TRADE(REC_TRD.BD,P_TRADE_ID);
        END IF;
        -- CIO-825 Bala 8/5/24 End

       IF REC_TRD.GDC_CREDIT_ONLY_IND = 'Y' THEN
          L_RDS_ID := 0;
          L_TOTAL_COMM_PCT := 100;
          INSERT_IT (P_REP_NUMBER
                    ,0
                   ,'C'
                    );
       ELSIF REC_TRD.GDC_CREDIT_ONLY_IND = 'C' THEN-- ADDED KS 12/01/06 ISSUE # 559 TO EXCLUDE CAREER CREDITS FROM COMMISSION PROCESSING.
          L_RDS_ID := 0;
          L_TOTAL_COMM_PCT := 100;
          V_STATUS := NULL;
          L_PAY_ORPHAN := PAY_ORPHAN (P_REP_NUMBER
                                     ,REC_TRD.CREATE_DATE --CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                                      -- NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) CG; 12/13/05: ISSUE 392
                                     ,REC_TRD.GROUP_CODE
                                     ,V_STATUS.TERM_ORPHAN_REP_NUMBER
                                     ,V_STATUS.TERM_ORPHAN_REP_DATE);
          IF L_PAY_ORPHAN = 2 THEN
              INSERT_IT (V_STATUS.TERM_ORPHAN_REP_NUMBER
                        ,0
                        ,'C'
                        );
          ELSIF L_PAY_ORPHAN >= 0 THEN
              INSERT_IT (P_REP_NUMBER
                        ,0
                        ,'C'
                        );
          ELSE
              INSERT_IT (L_HOUSE_REP
                        ,0
                       ,'C'
                        );
          END IF;
       ELSE
           -- 12/22/04 CG; ISSUE ORPHANED REPS
           -- IF NOT A SPLIT BUT AN ORPHAN SITUATION THEN LOOKUP ORPHAN REP RDS
           V_STATUS := NULL;
           L_PAY_ORPHAN := PAY_ORPHAN (P_REP_NUMBER
                                      ,REC_TRD.CREATE_DATE --CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                                       -- NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) CG; 12/13/05: ISSUE 392
                                      ,REC_TRD.GROUP_CODE
                                      ,V_STATUS.TERM_ORPHAN_REP_NUMBER
                                     ,V_STATUS.TERM_ORPHAN_REP_DATE);
           IF L_PAY_ORPHAN = 2 THEN
                -- 4/18/05 CG:  BREAKPOINT REPS
                L_IS_BP_REP := BP.IS_BP_REP(REC_TRD.BD, V_STATUS.TERM_ORPHAN_REP_NUMBER) = 'Y';
                IF L_IS_BP_REP THEN
                    L_RDS_ID := BP.DETERMINE_BP_RDS (REC_TRD.BD
                                                    ,V_STATUS.TERM_ORPHAN_REP_NUMBER
                                                    ,REC_TRD.CREATE_DATE--CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                                                     --,NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) -- CG; 12/13/05: ISSUE 392
                                                    ,REC_TRD.PROD_SPON_CODE
                                                    ,REC_TRD.PRODUCT_NUMBER
                                                    ,REC_TRD.GROUP_CODE
                                                    ,REC_TRD.SUB_GROUP_CODE
                                                    ,REC_TRD.A12B1_IND
                                                    ,REC_TRD.GDC_AMT * P_REP_SPLIT/100
                                                     ,REC_TRD.SPONSOR_ACCT_NUMBER  -- Code added for CIA-1447
                                                     ,REC_TRD.CLIENT_ID  -- Code added for CIA-1447
                                                     ,REC_TRD.SPON_CODE  -- Code added for CIA-1447
                                                     );
                    L_IS_BP_REP_FLAG := TRUE;
                ELSE
                    L_RDS_ID := SP_DETERMINE_RDS (REC_TRD.BD
                                                 ,V_STATUS.TERM_ORPHAN_REP_NUMBER
                                                 ,REC_TRD.CREATE_DATE--CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                                                  --,NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) -- CG; 12/13/05: ISSUE 392
                                                 ,REC_TRD.PROD_SPON_CODE
                                                 ,REC_TRD.PRODUCT_NUMBER
                                                 ,REC_TRD.GROUP_CODE
                                                 ,REC_TRD.SUB_GROUP_CODE
                                                 ,REC_TRD.A12B1_IND
                                                 ,REC_TRD.SPONSOR_ACCT_NUMBER  -- Code added for CIA-1447
                                                 ,REC_TRD.CLIENT_ID  -- Code added for CIA-1447
                                                 ,REC_TRD.SPON_CODE  -- Code added for CIA-1447
                                                  );
     
                END IF;
           ELSIF  L_PAY_ORPHAN >= 0 THEN  ---KS 06/27/2005 ISSUE #662 CHANGED
               -- 4/18/05 CG:  BREAKPOINT REPS
               L_IS_BP_REP := BP.IS_BP_REP(REC_TRD.BD, P_REP_NUMBER) = 'Y';
               IF L_IS_BP_REP THEN
                   L_RDS_ID := BP.DETERMINE_BP_RDS (REC_TRD.BD
                                                   ,P_REP_NUMBER
                                                   ,REC_TRD.CREATE_DATE----CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                                                    --,NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) -- CG; 12/13/05: ISSUE 392
                                                   ,REC_TRD.PROD_SPON_CODE
                                                   ,REC_TRD.PRODUCT_NUMBER
                                                   ,REC_TRD.GROUP_CODE
                                                   ,REC_TRD.SUB_GROUP_CODE
                                                   ,REC_TRD.A12B1_IND
                                                   ,REC_TRD.GDC_AMT * P_REP_SPLIT/100
                                                   ,REC_TRD.SPONSOR_ACCT_NUMBER  -- Code added for CIA-1447
                                                   ,REC_TRD.CLIENT_ID  -- Code added for CIA-1447
                                                   ,REC_TRD.SPON_CODE  -- Code added for CIA-1447
                                                    );
                   L_IS_BP_REP_FLAG := TRUE;
               ELSE
                   L_RDS_ID := SP_DETERMINE_RDS (REC_TRD.BD
                                                ,P_REP_NUMBER
                                                ,REC_TRD.CREATE_DATE-- --CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                                                 --,NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) -- CG; 12/13/05: ISSUE 392
                                                ,REC_TRD.PROD_SPON_CODE
                                                ,REC_TRD.PRODUCT_NUMBER
                                                ,REC_TRD.GROUP_CODE
                                                ,REC_TRD.SUB_GROUP_CODE
                                                ,REC_TRD.A12B1_IND
                                                ,REC_TRD.SPONSOR_ACCT_NUMBER  -- Code added for CIA-1447
                                                ,REC_TRD.CLIENT_ID  -- Code added for CIA-1447
                                                ,REC_TRD.SPON_CODE  -- Code added for CIA-1447
                                                 );                                           
               END IF;
           ELSE
               ---KS 06/29/2005 ISSUE #662 ADDED
               L_RDS_ID := NULL;
           END IF;
           IF L_RDS_ID IS NULL THEN
               --IF NO RDS INSERT TRADECOMM FOR REP PAYABLE TO HOUSE ACCOUNT
               OPEN  RS_REP_STATUS(P_REP_NUMBER);
               FETCH RS_REP_STATUS INTO V_STATUS;
               CLOSE RS_REP_STATUS;
               IF V_STATUS.STATUS_IND = 60 AND
                   ( -- CG; 12/13/05: ISSUE 392
                   (REC_TRD.A12B1_IND = 'Y' AND REC_TRD.CREATE_DATE > V_STATUS.STOP_PAYMENT_DATE) OR --CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                    -- CIO-825 Verify Trade to Pay Termed Rep till stop payment date for configured Spon Code / Group Code -- Bala - Begin
                    --(REC_TRD.A12B1_IND = 'N' AND (NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) > V_STATUS.TERM_DATE OR REC_TRD.CREATE_DATE > V_STATUS.STOP_PAYMENT_DATE))--CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                  (REC_TRD.A12B1_IND = 'N' AND REC_TRD.CREATE_DATE > V_STATUS.STOP_PAYMENT_DATE AND L_REP_TERM_EXCEPTION_TRADE=TRUE) OR
                  (REC_TRD.A12B1_IND = 'N' AND L_REP_TERM_EXCEPTION_TRADE=FALSE AND (NVL(REC_TRD.TRADE_DATE,REC_TRD.CREATE_DATE) > V_STATUS.TERM_DATE OR REC_TRD.CREATE_DATE > V_STATUS.STOP_PAYMENT_DATE))--CIO-825 8/5/24 and CHANGED KS 05/21/2006 ISSUE 662 TRADE DATE VS ENTRY DATE
                  -- CIO-825  Bala End
                  )  THEN
                   L_RDS_ID := 0;
                   L_TOTAL_COMM_PCT := 100;
                   INSERT_IT (L_HOUSE_REP
                             ,100
                             ,'C'
                              );
                   ELSE
                       P_HARD_ERROR := 'RDS NOT FOUND FOR REP NUMBER ' || P_REP_NUMBER || ' !';
                       ---KS 06/26/2005 ISSUE #662 ADD ZERO RDS FOR REPON HOLD
                       L_RDS_ID := 0;
                       L_TOTAL_COMM_PCT := 0;
                       INSERT_IT (P_REP_NUMBER
                                 ,0
                                 ,'C'
                                 );
                   END IF;
                   MOVE_FROM_TC_TMP_TO_TC;
                   RETURN;
               END IF;
               SELECT RDS_TYPE
               INTO L_RDS_TYPE
               FROM RDS
               WHERE RDS_ID = L_RDS_ID;
               SELECT SUM (PAYOUT_PERCENTAGE)
               INTO L_TOTAL_COMM_PCT
               FROM RDS_DETAILS
               WHERE RDS_ID = L_RDS_ID
                  AND PAYOUT_TYPE = 'C';
               L_TOTAL_COMM_PCT := NVL (L_TOTAL_COMM_PCT, 0);
               SELECT SUM (PAYOUT_PERCENTAGE)
               INTO L_TOTAL_EXC_HOUSE_PCT
               FROM RDS_DETAILS
               WHERE RDS_ID      = L_RDS_ID
                  AND REP_NUMBER <> L_HOUSE_REP;
               L_TOTAL_EXC_HOUSE_PCT := NVL (L_TOTAL_EXC_HOUSE_PCT, 0);
               IF P_MP_IND = 'NOOSJ' THEN
                   -- ALSO NEED TO EXCLUDE OSJ'S PCT
                   SELECT SUM (PAYOUT_PERCENTAGE)
                   INTO L_TOTAL_OSJ_PCT
                   FROM RDS_DETAILS RD, REPS_NUMBERS RN
                   WHERE RD.REP_NUMBER  = RN.REP_NUMBER
                       AND RN.BD  = REC_TRD.BD
                       AND RD.RDS_ID = L_RDS_ID
                       AND RD.PAYOUT_TYPE = 'O'
                       AND SP_IS_OFFICE_MNGR (REC_TRD.BD, REC_RR.OSJ_CODE, RN.SSN, REC_TRD.TRADE_DATE) = 'Y';
                    L_TOTAL_EXC_HOUSE_PCT := L_TOTAL_EXC_HOUSE_PCT - NVL (L_TOTAL_OSJ_PCT, 0);
               END IF;
               L_TOTAL_OSJ_PCT := 0;
         -- BJR 11/08/2007 - #813 RETRIEVE REP STATUS RECORD
         OPEN  RS_REP_STATUS(P_REP_NUMBER);
         FETCH RS_REP_STATUS INTO V_STATUS;
         CLOSE RS_REP_STATUS;

        ----@Sasi :BNS-8805
         OPEN  RS_REP_SUSPENDED (P_REP_NUMBER_OF_RECORD);
         FETCH RS_REP_SUSPENDED INTO V_RNR_SUSPENDED_STATUS_IND,V_RNR_SUSPENDED_SPLIT_IND;
         CLOSE RS_REP_SUSPENDED;

        IF (V_RNR_SUSPENDED_STATUS_IND = 50) AND (V_RNR_SUSPENDED_SPLIT_IND = 'N') THEN --Added Split_ind = N by Sasi for BIZREQ:8805 08/01/2018
             SELECT CODE_ID INTO L_ERROR_CODE
             FROM TAPE_ERROR_LIST
             WHERE UPPER(CODE_SHORT_DESC) LIKE 'SUSPENDED REP : PER COMPLIANCE';
             ADD_SOFT_ERROR ( 'SUSPENDED REP OF RECORD - REP_NUMBER : ' || P_REP_NUMBER_OF_RECORD
                            || CHR (13) || CHR (10));
             ADD_SOFT_ERROR_CODE ( L_ERROR_CODE
                                   || CHR (13) || CHR (10));
             UPDATE TRADES
             SET HELD_IND = 'Y'
                ,HELD_REASON = P_SOFT_ERROR
                ,HELD_REASON_CODE = P_SOFT_ERROR_CODE
             WHERE TRADE_ID = P_TRADE_ID;
--             COMMIT;
         END IF;
         -- BIZREQ-8805 --end
         FOR REC_RDS IN (SELECT RD.REP_NUMBER
                          ,RD.PAYOUT_PERCENTAGE
                          ,RD.PAYOUT_TYPE
                          ,RD.TICKET_CHARGE_PCT     --SW 01/30/2011 BNS-33079 ADDED TO DISTRIBUTE THE TICKET CHARGES AMONG THE PARTICIPANTS
                    FROM RDS_DETAILS RD
                    WHERE RD.RDS_ID = L_RDS_ID
                    ORDER BY DECODE (RD.REP_NUMBER, L_HOUSE_REP, 2, 1) ASC -- HOUSE MUST BE LAST !!
                          ,PAYOUT_TYPE  ASC
                        ) LOOP

             IF L_RDS_TYPE = 'S' THEN
                 SP_BUILD_TC (P_TRADE_ID
                             ,REC_RDS.REP_NUMBER
                             ,P_REP_NUMBER_OF_RECORD
                             ,P_REP_SPLIT * REC_RDS.PAYOUT_PERCENTAGE / 100
                             ,P_MP_IND
                             ,L_SOFT_ERROR
                             ,L_SOFT_ERROR_CODE   --TRADE SEARCH LATENCY ISSUE
                             ,L_HARD_ERROR
                             );
                 IF L_HARD_ERROR IS NOT NULL THEN
                    P_HARD_ERROR := L_HARD_ERROR;
                    RETURN;
                 END IF;
                 IF L_SOFT_ERROR IS NOT NULL THEN
                    ADD_SOFT_ERROR (L_SOFT_ERROR);
                 END IF;
                 IF L_SOFT_ERROR_CODE IS NOT NULL THEN   -- TRADE SEARCH LATENCY ISSUE
                    ADD_SOFT_ERROR_CODE (L_SOFT_ERROR_CODE);
                 END IF;
             ELSE
               -- DO NOT INSERT IF THIS IS A JOINT NUMBER
               -- AND OTHERS ARE GETTING PAID THE COMMISSION
               IF REC_RDS.REP_NUMBER = P_REP_NUMBER
                   AND REC_RDS.PAYOUT_PERCENTAGE = 0
                   AND REC_PARTICIPANT.SPLIT_IND = 'Y' THEN
                   NULL;
               ELSIF REC_RDS.REP_NUMBER = L_HOUSE_REP THEN -- 4/18/05 CG:  BREAKPOINT REPS
                   INSERT_IT (L_HOUSE_REP -- INSERT % DIRECTLY, NO ADDING TO HOUSE %'S
                             ,REC_RDS.PAYOUT_PERCENTAGE
                             ,REC_RDS.PAYOUT_TYPE
                             ,REC_RDS.TICKET_CHARGE_PCT --SW 01/30/2011 BNS-33079
                             );
               ELSIF L_IS_BP_REP AND L_IS_BP_REP_FLAG = FALSE AND REC_RDS.PAYOUT_TYPE = 'C' THEN
                   PROCESS_BP_REP (L_RDS_ID, REC_RDS.PAYOUT_PERCENTAGE);  -- 4/18/05 CG:  BREAKPOINT REPS
               ELSE
                   OPEN  RS_REP_STATUS(REC_RDS.REP_NUMBER);
                   FETCH RS_REP_STATUS INTO V_PARTICIPANT_STATUS;
                   CLOSE RS_REP_STATUS;
                   -- BJR 11/8/2007: #813 - RETRIEVE REP OF RECORD AND RDS PARTICIPANT VESTED STATUS AND ACTIVE STATUS
                   L_REP_OF_RECORD_VESTED_IND := SP_REP_VESTED(P_REP_NUMBER);      --  IS REP OF RECORD VESTED?
                   L_PARTICIPANT_ACTIVE_IND := SP_REP_ACTIVE(REC_RDS.REP_NUMBER);        --  IS RDS PARTICIPANT REP ACTIVE?
                   L_PARTICIPANT_VESTED_IND := SP_REP_VESTED(REC_RDS.REP_NUMBER);        --  IS RDS PARTICIPANT VESTED?

                    --@Sasi:BIZREQ-8805 --To pay suspended portion to House rep
                    OPEN  RS_REP_SUSPENDED (REC_RDS.REP_NUMBER);
                    FETCH RS_REP_SUSPENDED INTO V_RN_SUSPENDED_STATUS;
                    CLOSE RS_REP_SUSPENDED;

                   -- BJR 11/20/07: ISSUE 813 FIXED INSURANCE ORPHAN RULES FOR TRADES BY TERMED REPS PAST STOP PAMENT DATE ONLY
                   IF REC_TRD.GROUP_CODE = 'F' AND
                      V_STATUS.STATUS_IND = 60 AND
                      REC_TRD.CREATE_DATE > V_STATUS.STOP_PAYMENT_DATE THEN
                       -- BJR 11/17/07: COMMON LOGIC FOR FIXED INSURANCE ORPHANING
                       ALLOCATE_FIXED_INSURANCE ( L_REP_OF_RECORD_VESTED_IND
                                                 ,L_PARTICIPANT_ACTIVE_IND
                                                 ,L_PARTICIPANT_VESTED_IND
                                                 ,V_STATUS.TERM_ORPHAN_REP_NUMBER
                                                 ,REC_RDS.REP_NUMBER
                                                 ,REC_RDS.PAYOUT_PERCENTAGE
                                                 ,REC_RDS.PAYOUT_TYPE
                                                 ,L_HOUSE_REP );
                   -- ALLOW NORMAL PAYOUT IN THE FOLLOWING SITUATIONS:
                   --  A. REP IS NOT TERMED   OR
                   --  B. TRADE HAPPENED WITHIN THE GRACE PERIOD   OR
                   --  C. PRODUCT GROUP IS 'F' (FIXED INSURANCE) AND REP IS VESTED--TERMED OR NOT
                   --KS 06/25/2005 ISSUE #662 CHANGED AS PER PAYMENT MODEL.
                   ELSIF (V_RN_SUSPENDED_STATUS.STATUS_IND = 50) AND (V_RNR_SUSPENDED_SPLIT_IND = 'Y') THEN --ADDED CONDITION FOR BIZREQ-8805 by sasi
                          INSERT_IT (L_HOUSE_REP
                             ,REC_RDS.PAYOUT_PERCENTAGE
                             ,REC_RDS.PAYOUT_TYPE
                             ,REC_RDS.TICKET_CHARGE_PCT
                             );
                   ELSIF (V_PARTICIPANT_STATUS.STATUS_IND <> 60)
                      OR (REC_RDS.REP_NUMBER = P_REP_NUMBER)
                      OR (REC_TRD.CREATE_DATE <= V_STATUS.STOP_PAYMENT_DATE) THEN

                           INSERT_IT (REC_RDS.REP_NUMBER
                                     ,REC_RDS.PAYOUT_PERCENTAGE
                                     ,REC_RDS.PAYOUT_TYPE
                                     ,REC_RDS.TICKET_CHARGE_PCT --SW 01/30/2012 BNS-33079
                                     );

                   ELSE    --KS 06/29/2005 ADDED AND USED NEW TAPE ERROR FOR TERMINATED REP ON RDS
                       L_IS_TERMED_REP__ON_RDS := TRUE;
                       IF L_TERMED_REPS_ON_RDS IS NULL THEN
                           L_TERMED_REPS_ON_RDS := REC_RDS.REP_NUMBER;
                       ELSE
                           L_TERMED_REPS_ON_RDS := L_TERMED_REPS_ON_RDS || ',' || REC_RDS.REP_NUMBER;
                       END IF;
                       INSERT_IT (REC_RDS.REP_NUMBER-- 4/18/05 CG:  BREAKPOINT REPS
                                 ,REC_RDS.PAYOUT_PERCENTAGE -- INSERT % DIRECTLY, NO ADDING TO HOUSE %'S
                                 ,REC_RDS.PAYOUT_TYPE
                                 ,REC_RDS.TICKET_CHARGE_PCT --SW 01/30/2012 BNS-33079
                                 );
                   END IF;     --END VESTED REPS 12-14-04 TL
               END IF;
             END IF;
         END LOOP;

         --KS ISSUE # 1081 TO HOLD PENDING TRADES
         IF IS_ANY_REP_NUM_INACTIVE(P_REP_NUMBER_OF_RECORD,L_RDS_ID) = TRUE THEN
             SELECT CODE_ID INTO L_ERROR_CODE
             FROM TAPE_ERROR_LIST
            WHERE UPPER(CODE_SHORT_DESC) LIKE 'HOLD - REP NOT ACTIVE';
             ADD_SOFT_ERROR ( 'INACTIVE REP OF RECORD OR INACTIVE REP # ON RDS'
                            || CHR (13) || CHR (10));
             ADD_SOFT_ERROR_CODE ( L_ERROR_CODE
                                   || CHR (13) || CHR (10));
             UPDATE TRADES
             SET HELD_IND = 'Y'
                ,HELD_REASON = P_SOFT_ERROR
                ,HELD_REASON_CODE = P_SOFT_ERROR_CODE  -- TRADE SEARCH LATENCY ISSUE
             WHERE TRADE_ID = P_TRADE_ID;
         END IF;

         IF L_IS_TERMED_REP__ON_RDS THEN
             SELECT CODE_ID INTO L_ERROR_CODE
             FROM TAPE_ERROR_LIST
            WHERE UPPER(CODE_SHORT_DESC) LIKE 'HOLD - TERMINATED REP WITHIN RDS';
             ADD_SOFT_ERROR ( 'REP NUMBER '
                            || L_TERMED_REPS_ON_RDS
                            || ' '
                            || 'WITHIN RDS IS TERMINATED!  '
                            || CHR (13) || CHR (10));
             ADD_SOFT_ERROR_CODE ( L_ERROR_CODE
                                   || CHR (13) || CHR (10));
             UPDATE TRADES
             SET HELD_IND = 'Y'
                ,HELD_REASON = P_SOFT_ERROR
                ,HELD_REASON_CODE = P_SOFT_ERROR_CODE  -- TRADE SEARCH LATENCY ISSUE
             WHERE TRADE_ID = P_TRADE_ID;
         END IF;

         ADD_MISSING_REPS;
         IF L_RDS_TYPE = 'I' THEN
             -- MAKE SURE AT LEAST ONE REP PAID COMMISSION
             -- AND CORRECT JOINT PCT'S IF NEEDED
             L_TOTAL_CNT := 0;
             SELECT COUNT (*)
             INTO L_TOTAL_CNT
             FROM TRADECOMM_TMP
             WHERE REP_NUMBER_OF_RECORD   = P_REP_NUMBER_OF_RECORD
                AND PARTICIPANT_REP_NUMBER = P_REP_NUMBER
                AND TRADE_ID               = P_TRADE_ID
                AND PAYOUT_TYPE            = 'C';
             IF NVL (L_TOTAL_CNT, 0) = 0 THEN
                 P_HARD_ERROR := 'NO COMMISSIONABLE REP ON RDS!';
                             CLEAR_TC_TMP;
                 RETURN;
             END IF;
              IF L_TOTAL_COMM_PCT = 0 THEN
                 -- RE-ADJUST JOINT PCT
                 --VR :ISSUE# 1840 08/25/2008
                  IF  L_TOTAL_CNT=0 THEN
                        UPDATE TRADECOMM_TMP
                        SET JOINT_SPLIT_PCT = 100
                        WHERE REP_NUMBER_OF_RECORD   = P_REP_NUMBER_OF_RECORD
                            AND PARTICIPANT_REP_NUMBER = P_REP_NUMBER
                            AND TRADE_ID               = P_TRADE_ID
                            AND PAYOUT_TYPE            = 'C';
                    ELSE
                        UPDATE TRADECOMM_TMP
                        SET JOINT_SPLIT_PCT = 100 / L_TOTAL_CNT
                        WHERE REP_NUMBER_OF_RECORD   = P_REP_NUMBER_OF_RECORD
                            AND PARTICIPANT_REP_NUMBER = P_REP_NUMBER
                            AND TRADE_ID               = P_TRADE_ID
                            AND PAYOUT_TYPE            = 'C';
                  END IF;
                 --VR :ISSUE# 1840 08/25/2008
              END IF;
             IF P_MP_IND IS NULL OR P_MP_IND IN ('ALL') THEN
                 -- MAKE SURE MEETS 529 LICENSE CHECKS
                 L_MP_RESULTS := SP_MP_CHECK (P_TRADE_ID
                                             ,P_REP_NUMBER_OF_RECORD
                                             ,P_REP_NUMBER
                                             );
                 IF L_MP_RESULTS = 'NOOSJ' THEN
                     -- NEED TO RE-PROCESS W/O OSJ
                       DELETE FROM TRADECOMM_TMP
                       WHERE TRADE_ID               = P_TRADE_ID
                          AND REP_NUMBER_OF_RECORD   = P_REP_NUMBER_OF_RECORD
                          AND PARTICIPANT_REP_NUMBER = P_REP_NUMBER;
                       P_SOFT_ERROR := L_SAVE_SOFT_ERROR;
                       P_SOFT_ERROR_CODE := L_SAVE_SOFT_ERROR_CODE;
                       SP_BUILD_TC (P_TRADE_ID
                                   ,P_REP_NUMBER
                                   ,P_REP_NUMBER_OF_RECORD
                                   ,P_REP_SPLIT
                                   ,L_MP_RESULTS
                                   ,P_SOFT_ERROR
                                   ,P_SOFT_ERROR_CODE   --TRADE SEARCH LATENCY ISSUE
                                   ,P_HARD_ERROR
                                   );
                       -- CG: ISSUE 431
                   ELSIF L_MP_RESULTS = 'HOLD' AND NVL (REC_TRD.HELD_IND, 'X') <> 'R' THEN
                     /*SELECT IGNORE_529_HOLDS
                       INTO L_IGNORE_529
                       FROM BD
                       WHERE BD.BD_NUMBER = REC_TRD.BD;
                       IF L_IGNORE_529 = 'N' THEN */
                       -- NEED TO HOLD TRADE
                       SELECT CODE_SHORT_DESC
                       INTO L_529_ERROR
                       FROM TAPE_ERROR_LIST
                       WHERE CODE_ID = 59;
                       IF INSTR (P_SOFT_ERROR, L_529_ERROR) = 0 OR P_SOFT_ERROR IS NULL THEN
                           ADD_SOFT_ERROR ( L_529_ERROR || '!  '
                                                        || CHR (13) || CHR (10));
                           ADD_SOFT_ERROR_CODE ('59'); --LINE ADDED 1-6-05 TL 529 ISSUE
                           UPDATE TRADES SET
                               HELD_IND = 'Y'
                              ,HELD_REASON = P_SOFT_ERROR
                              ,HELD_REASON_CODE = P_SOFT_ERROR_CODE --CHANGED '59' TO VARIABLE 1-6-05 TL 529 ISSUE
                           WHERE TRADE_ID = P_TRADE_ID;
                       END IF;
                       --END IF;
                 END IF;
             END IF;
         END IF;
      END IF;
      -- #457 BJR 5/17/08 REALLOCATE IN CASE OF UNLICENSED REPS
      SP_REALLOCATE_TRADECOMM_TMP(REC_TRD.BD
                                 ,P_TRADE_ID
                                 ,P_REP_NUMBER_OF_RECORD
                                 ,REC_TRD.SPONSOR_ACCT_NUMBER
                                 ,REC_TRD.TRADE_DATE
                                 ,REC_TRD.GDC_AMT
                                 ,REC_TRD.NOTES
                                 ,REC_TRD.PROD_SPON_CODE
                                 ,REC_TRD.PRODUCT_NUMBER
                                 ,REC_TRD.STATE_CODE
                                 ,REC_TRD.A12B1_IND
                                 ,L_FEE_FORMULA
                                 ,REC_TRD.FEE_AMT
                                 ,L_APPROVED_PENDING_PRINTS_IND
                                 );

       --@Sasi : BIZREQ-262 Start
       IF IS_ICC_OFFICE_RANGE(SUBSTR(REC_TRD.SPONSOR_ACCT_NUMBER, 1, 3),'ICC_ADV_TICKET_CHARGE',P_TRADE_ID,TRUE) = TRUE  THEN
          IF INSTR(L_NOTES, 'ORIG TC', 1) > 0 THEN
            UPDATE TRADES
            SET NOTES = L_NOTES
            WHERE TRADE_ID = P_TRADE_ID;
          END IF;
       END IF;
       --@Sasi : BIZREQ-262 End
       MOVE_FROM_TC_TMP_TO_TC;
       EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
               -- CG 3/14/05  ADDED ERROR HANDLING FOR ONE SPECIFIC ERROR FOR ORPHAN REP DUPLICATE RDS HANDLING
               P_HARD_ERROR := 'UNIQUE CONSTRAINT VIOLATED - SEE RDS! ' || CHR(10)
                               || 'TRADE ID = ' || P_TRADE_ID || CHR(10)
                               || 'REP_NUMBER = ' || P_REP_NUMBER || CHR(10)
                               || 'REP_NUMBER_OF_RECORD = ' || P_REP_NUMBER_OF_RECORD || CHR(10)
                               || 'REP_SPLIT = ' || P_REP_SPLIT || CHR(10)
                               || 'RDS ID = ' || L_RDS_ID || CHR(10)
                               || 'INSERT REP # = ' || INSERT_IT_INFO.RDS_REP_NUMBER || CHR(10)
                               || 'INSERT RDS PCT = ' || INSERT_IT_INFO.RDS_PCT || CHR(10)
                               || 'INSERT RDS PAYOUT TYPE = ' || INSERT_IT_INFO.RDS_PAYOUT_TYPE;
               PL(P_HARD_ERROR,255,TRUE);
               BEGIN
                   MOVE_FROM_TC_TMP_TO_TC;
                   EXCEPTION
                      WHEN OTHERS THEN
                          NULL;
               END;
               RETURN;
           WHEN OTHERS THEN
               -- CG 3/14/05  ADDED GENERAL ERROR HANDLING
               P_HARD_ERROR := SQLERRM || CHR(10)
                                       || 'TRADE ID = ' || P_TRADE_ID || CHR(10)
                                       || 'REP_NUMBER = ' || P_REP_NUMBER || CHR(10)
                                       || 'REP_NUMBER_OF_RECORD = ' || P_REP_NUMBER_OF_RECORD || CHR(10)
                                       || 'REP_SPLIT = ' || P_REP_SPLIT || CHR(10)
                                       || 'RDS ID = ' || L_RDS_ID || CHR(10)
                                       || 'INSERT REP # = ' || INSERT_IT_INFO.RDS_REP_NUMBER || CHR(10)
                                       || 'INSERT RDS PCT = ' || INSERT_IT_INFO.RDS_PCT || CHR(10)
                                       || 'INSERT RDS PAYOUT TYPE = ' || INSERT_IT_INFO.RDS_PAYOUT_TYPE;
               PL(P_HARD_ERROR,255,TRUE);
               BEGIN
                   MOVE_FROM_TC_TMP_TO_TC;
               EXCEPTION
                   WHEN OTHERS THEN
                       NULL;
               END;
           RETURN;
   END ; --SP_BUILD_TC
--END